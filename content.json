{"meta":{"title":"Shiyi Wang 博客","subtitle":"wwx的blog","description":"为了记录自己所学习的内容，创建blog","author":"Shiyi Wang","url":"https://wwxnb261.github.io","root":"/"},"pages":[{"title":"关于博客主","date":"2024-08-15T20:15:54.000Z","updated":"2025-03-20T05:32:19.769Z","comments":false,"path":"about/index.html","permalink":"https://wwxnb261.github.io/about/index.html","excerpt":"","text":"我使用什么语言 HTML CSS JAVA C++ Python 我使用什么开发工具 Visual Stdio Code Pycharm Github Git"},{"title":"博客总览","date":"2025-03-26T06:46:45.287Z","updated":"2025-03-26T06:46:45.287Z","comments":false,"path":"overview/index.html","permalink":"https://wwxnb261.github.io/overview/index.html","excerpt":"","text":""},{"title":"文章列表","date":"2025-03-20T04:46:36.977Z","updated":"2025-03-20T04:46:36.977Z","comments":false,"path":"posts/index.html","permalink":"https://wwxnb261.github.io/posts/index.html","excerpt":"","text":""}],"posts":[{"title":"平方和求和公式","slug":"get_high/平方和求和公式","date":"2025-03-27T07:34:01.000Z","updated":"2025-03-27T07:58:58.368Z","comments":true,"path":"2025/03/27/get_high/平方和求和公式/","permalink":"https://wwxnb261.github.io/2025/03/27/get_high/%E5%B9%B3%E6%96%B9%E5%92%8C%E6%B1%82%E5%92%8C%E5%85%AC%E5%BC%8F/","excerpt":"平方和求和公式","text":"平方求和公式是指计算从 $1^2$ 到 $n^2$ 的和，即： $$ S = 1^2 + 2^2 + 3^2 + \\dots + n^2 $$ 其结果为： $$ S = \\frac{n(n+1)(2n+1)}{6} $$ 推导过程（利用立方差公式） 写出立方差关系： 注意到 $(k+1)^3 - k^3 = 3k^2 + 3k + 1$，对 $k = 1$ 到 $n$ 依次展开： $$ \\begin{align*} 2^3 - 1^3 &= 3 \\cdot 1^2 + 3 \\cdot 1 + 1 \\\\ 3^3 - 2^3 &= 3 \\cdot 2^2 + 3 \\cdot 2 + 1 \\\\ &\\vdots \\\\ (n+1)^3 - n^3 &= 3 \\cdot n^2 + 3 \\cdot n + 1 \\end{align*} $$ 累加所有等式： 将上述 $n$ 个等式相加，左边大部分项抵消，得到： $$ (n+1)^3 - 1^3 = 3 \\sum_{k=1}^n k^2 + 3 \\sum_{k=1}^n k + \\sum_{k=1}^n 1 $$ 代入已知求和公式： 已知： $$ \\sum_{k=1}^n k = \\frac{n(n+1)}{2}, \\quad \\sum_{k=1}^n 1 = n $$ 代入后： $$ n^3 + 3n^2 + 3n = 3S + \\frac{3n(n+1)}{2} + n $$ 解方程求 $S$： 整理方程： $$ 3S = n^3 + 3n^2 + 3n - \\frac{3n(n+1)}{2} - n $$ 化简后得到： $$ S = \\frac{n(n+1)(2n+1)}{6} $$ 验证公式（数学归纳法） 基例（$n=1$）： $$ S = 1^2 = 1, \\quad \\frac{1 \\cdot 2 \\cdot 3}{6} = 1 \\quad \\text{成立}. $$ 归纳假设： 假设公式对 $n = k$ 成立，即： $$ 1^2 + 2^2 + \\dots + k^2 = \\frac{k(k+1)(2k+1)}{6} $$ 证明对 $n = k+1$ 成立： 计算： $$ S_{k+1} = S_k + (k+1)^2 = \\frac{k(k+1)(2k+1)}{6} + (k+1)^2 $$ 化简后： $$ S_{k+1} = \\frac{(k+1)(k+2)(2k+3)}{6} $$ 符合公式，得证。 示例计算 当 $n=3$ 时： $$ 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14, \\quad \\frac{3 \\cdot 4 \\cdot 7}{6} = 14 $$ 当 $n=5$ 时： $$ 1^2 + 2^2 + \\dots + 5^2 = 55, \\quad \\frac{5 \\cdot 6 \\cdot 11}{6} = 55 $$ 应用场景 概率统计：计算离散数据的方差。 物理与工程：分析能量分布或惯性矩。 算法分析：评估时间复杂度（如嵌套循环）。 总结：平方和公式是基础数学工具，掌握其推导与验证方法，可灵活应用于科学计算与实际问题。 ✅ 验证报告： 已转化行内公式：6处 已调整独立公式：12处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"二重积分或几何中特殊曲线总结","slug":"get_high/二重积分或几何中特殊曲线总结","date":"2025-03-27T06:21:20.000Z","updated":"2025-03-27T06:25:36.747Z","comments":true,"path":"2025/03/27/get_high/二重积分或几何中特殊曲线总结/","permalink":"https://wwxnb261.github.io/2025/03/27/get_high/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E6%88%96%E5%87%A0%E4%BD%95%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%9B%B2%E7%BA%BF%E6%80%BB%E7%BB%93/","excerpt":"二重积分或几何中特殊曲线总结","text":"以下是高等数学中常见的特殊曲线总结，包含名称、方程、图像特征及典型应用： 总结 1. 星形线（Astroid） 方程： 直角坐标：$x^{2/3} + y^{2/3} = a^{2/3}$ 参数方程：$x = a\\cos^3\\theta$, $y = a\\sin^3\\theta$ 图像：四尖点对称，形似四角星。 应用：内摆线特例（小圆半径为大圆的1/4），积分对称性示例。 2. 心脏线（Cardioid） 方程： 极坐标：$r = a(1 + \\cos\\theta)$ 参数方程：$x = a(2\\cos\\theta - \\cos2\\theta)$, $y = a(2\\sin\\theta - \\sin2\\theta)$ 图像：心形，单尖点。 应用：蜗线的一种，声学与光学中的焦散曲线。 3. 笛卡尔叶形线（Folium of Descartes） 方程： 直角坐标：$x^3 + y^3 = 3axy$ 参数方程：$x = \\frac{3at}{1 + t^3}$, $y = \\frac{3at^2}{1 + t^3}$ 图像：单叶通过原点，渐近线为$x + y + a = 0$。 应用：参数方程与极限分析范例。 4. 双纽线（Lemniscate） 方程： 伯努利双纽线：$(x^2 + y^2)^2 = a^2(x^2 - y^2)$ 极坐标：$r^2 = a^2\\cos2\\theta$ 图像：横置的“∞”形，两焦点对称。 应用：复数平面上模数的几何表示。 5. 摆线（Cycloid） 方程： 参数方程： $$ x = a(\\theta - \\sin\\theta), \\quad y = a(1 - \\cos\\theta) $$ 图像：周期性拱形，无端点。 应用：最速降线问题，力学中的等时曲线。 6. 外摆线（Epicycloid）与内摆线（Hypocycloid） 方程（外摆线为例）： 参数方程： $$ x = (R + r)\\cos\\theta - r\\cos\\left(\\frac{R + r}{r}\\theta\\right), \\quad y = (R + r)\\sin\\theta - r\\sin\\left(\\frac{R + r}{r}\\theta\\right) $$ 特例： 星形线：内摆线（$R = 4r$）。 心脏线：外摆线（$R = r$）。 应用：齿轮齿形设计，几何变换案例。 7. 阿基米德螺线（Archimedean Spiral） 方程： 极坐标：$r = a\\theta$ 图像：每圈间距相等的螺旋线。 应用：机械凸轮设计，极坐标积分示例。 8. 对数螺线（Logarithmic Spiral） 方程： 极坐标：$r = ae^{b\\theta}$ 图像：间距随角度指数增长的螺旋线。 应用：自然界中的生长模式（如鹦鹉螺壳）。 9. 悬链线（Catenary） 方程： 直角坐标：$y = a\\cosh\\left(\\frac{x}{a}\\right)$ 图像：两端下垂的曲线，与抛物线不同。 应用：桥梁与拱门设计，最小势能问题。 10. 玫瑰线（Rose Curve） 方程： 极坐标：$r = a\\cos(k\\theta)$ 或 $r = a\\sin(k\\theta)$ 类型： 三叶玫瑰线（$k = 3$）：三瓣对称。 四叶玫瑰线（$k = 2$）：四瓣对称。 应用：极坐标绘图与对称性分析。 11. 箕舌线（Witch of Agnesi） 方程： 直角坐标：$y = \\frac{8a^3}{x^2 + 4a^2}$ 图像：钟形曲线，渐近线为$y = 0$。 应用：概率密度函数的历史原型。 12. 蚌线（Conchoid） 方程（以尼科米德蚌线为例）： 极坐标：$r = a + b\\sec\\theta$ 图像：依据参数不同，可能为闭合或分支曲线。 应用：经典几何问题（三等分角）。 13. 双曲线（Hyperbola）与椭圆（Ellipse） 双曲线： 方程：$\\frac{x^2}{a^2} - \\frac{y^2}{b^2} = 1$ 应用：天体轨道（开放路径）、渐近行为分析。 椭圆： 方程：$\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$ 应用：行星轨道、几何变换。 14. 抛物线（Parabola） 方程：$y^2 = 4ax$ 应用：抛体运动轨迹、光学反射性质。 15. 马鞍面曲线（双曲抛物面截线） 方程：$z = xy$ 或 $x^2 - y^2 = z$ 图像：鞍形，沿不同方向开口相反。 应用：鞍点分析、多变量函数极值示例。 总结表 曲线名称 典型方程 图像特征 应用场景 星形线 $x^{2/3} + y^{2/3} = a^{2/3}$ 四尖点对称 积分对称性分析 心脏线 $r = a(1 + \\cos\\theta)$ 心形单尖点 蜗线运动、焦散现象 笛卡尔叶形线 $x^3 + y^3 = 3axy$ 单叶过原点 参数方程范例 双纽线 $(x^2 + y^2)^2 = a^2(x^2 - y^2)$ 横置“∞”形 复数几何、对称积分 摆线 $x = a(\\theta - \\sin\\theta)$ 周期性拱形 最速降线、力学问题 阿基米德螺线 $r = a\\theta$ 等间距螺旋 极坐标积分、机械设计 悬链线 $y = a\\cosh(x/a)$ 下垂曲线 桥梁设计、最小势能 玫瑰线 $r = a\\cos(k\\theta)$ 多瓣对称 极坐标绘图 双曲抛物面截线 $z = xy$ 马鞍形 多变量极值、鞍点分析 注：以上曲线在高等数学中常用于演示参数方程、极坐标、对称性积分、几何变换等概念，实际应用中需结合具体场景选择合适模型。 参数方程形式 高等数学特殊曲线总结表 曲线名称 典型方程 参数方程形式 图像特征 应用场景 1. 星形线 $x^{2/3} + y^{2/3} = a^{2/3}$ $x = a\\cos^3\\theta$, $y = a\\sin^3\\theta$ 四尖点对称 积分对称性分析 2. 心脏线 $r = a(1 + \\cos\\theta)$ $x = a(2\\cos\\theta - \\cos2\\theta)$, $y = a(2\\sin\\theta - \\sin2\\theta)$ 心形单尖点 蜗线运动、焦散现象 3. 笛卡尔叶形线 $x^3 + y^3 = 3axy$ $x = \\frac{3at}{1 + t^3}$, $y = \\frac{3at^2}{1 + t^3}$ 单叶过原点 参数方程范例 4. 双纽线 $(x^2 + y^2)^2 = a^2(x^2 - y^2)$ $x = a\\cos\\theta\\sqrt{\\cos2\\theta}$, $y = a\\sin\\theta\\sqrt{\\cos2\\theta}$ 横置“∞”形 复数几何、对称积分 5. 摆线 — $x = a(\\theta - \\sin\\theta)$, $y = a(1 - \\cos\\theta)$ 周期性拱形 最速降线、力学问题 6. 外摆线 — $x = (R + r)\\cos\\theta - r\\cos\\left(\\frac{R + r}{r}\\theta\\right)$ $y = (R + r)\\sin\\theta - r\\sin\\left(\\frac{R + r}{r}\\theta\\right)$ 外滚轮轨迹 齿轮设计、几何变换 7. 内摆线 — $x = (R - r)\\cos\\theta + r\\cos\\left(\\frac{R - r}{r}\\theta\\right)$ $y = (R - r)\\sin\\theta - r\\sin\\left(\\frac{R - r}{r}\\theta\\right)$ 内滚轮轨迹 星形线特例（$R = 4r$） 8. 阿基米德螺线 $r = a\\theta$ $x = a\\theta\\cos\\theta$, $y = a\\theta\\sin\\theta$ 等间距螺旋 极坐标积分、机械设计 9. 对数螺线 $r = ae^{b\\theta}$ $x = ae^{b\\theta}\\cos\\theta$, $y = ae^{b\\theta}\\sin\\theta$ 指数增长螺旋 自然生长模型 10. 悬链线 $y = a\\cosh\\left(\\frac{x}{a}\\right)$ $x = t$, $y = a\\cosh\\left(\\frac{t}{a}\\right)$ 下垂曲线 桥梁设计、最小势能 11. 玫瑰线 $r = a\\cos(k\\theta)$ $x = a\\cos(k\\theta)\\cos\\theta$, $y = a\\cos(k\\theta)\\sin\\theta$ 多瓣对称 极坐标绘图 12. 箕舌线 $y = \\frac{8a^3}{x^2 + 4a^2}$ $x = 2a\\tan\\theta$, $y = 2a\\cos^2\\theta$ 钟形曲线 概率密度原型 13. 蚌线 $r = a + b\\sec\\theta$ $x = a + b\\sec\\theta$, $y = (a + b\\sec\\theta)\\tan\\theta$ 分支或闭合曲线 经典几何问题 14. 双曲线 $\\frac{x^2}{a^2} - \\frac{y^2}{b^2} = 1$ $x = a\\sec\\theta$, $y = b\\tan\\theta$ 或 $x = a\\cosh t$, $y = b\\sinh t$ 双开口分支 天体轨道、渐近分析 15. 椭圆 $\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$ $x = a\\cos\\theta$, $y = b\\sin\\theta$ 闭合对称椭圆 行星轨道、几何变换 16. 抛物线 $y^2 = 4ax$ $x = at^2$, $y = 2at$ 单开口对称曲线 抛体运动、光学反射 17. 双曲抛物面截线 $z = xy$ $x = t$, $y = s$, $z = ts$（三维参数） 二维截线：$x = t$, $y = k/t$ 马鞍形 多变量极值、鞍点分析 关键说明 参数方程变量：表中统一使用 $\\theta$ 或 $t$ 作为参数，具体意义根据曲线类型调整。 三维曲线处理：双曲抛物面截线（马鞍面）需三维参数方程，但常用二维截线简化分析。 极坐标转换：部分曲线的参数方程通过极坐标方程直接转换而来（如 $r = a\\theta$ → $x = a\\theta\\cos\\theta$, $y = a\\theta\\sin\\theta$）。 特例关联：星形线是内摆线特例（$R = 4r$），心脏线是外摆线特例（$R = r$）。 应用示例 星形线积分：利用参数方程计算弧长： $$ \\int_0^{2\\pi} \\sqrt{(dx/d\\theta)^2 + (dy/d\\theta)^2} , d\\theta $$ 摆线最速降线：通过参数方程分析质点在重力作用下的运动时间。 双纽线对称性：利用极坐标参数方程验证积分对称性： $$ \\iint r^2 \\cos2\\theta , drd\\theta $$","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"408复习计划规划","slug":"get_high/408复习计划规划","date":"2025-03-26T07:38:04.000Z","updated":"2025-03-26T07:38:16.550Z","comments":true,"path":"2025/03/26/get_high/408复习计划规划/","permalink":"https://wwxnb261.github.io/2025/03/26/get_high/408%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E8%A7%84%E5%88%92/","excerpt":"408复习计划规划","text":"以下是基于王道论坛及多位考生经验总结的408计算机专业课考研复习经验整理，涵盖复习策略、时间规划、重点科目及常见误区等内容，供参考： 一、参考书与资料推荐 核心辅导书 王道系列：四本单科书（数据结构、计组、操作系统、计网）+ 真题解析 + 模拟题（推荐8套卷）。 天勤：数据结构部分讲解较细致，适合基础薄弱或跨考生。 教材补充：如唐朔飞《计算机组成原理》、谢希仁《计算机网络》等，用于辅助理解难点。 其他资料：肖秀荣政治系列、李永乐数学全书等公共课资料。 视频资源 王道冲刺视频（用于知识点串讲）。 天勤数据结构视频（针对算法难点）。 B站灰灰考研的真题解析。 二、复习顺序与策略 科目顺序建议 推荐顺序：数据结构 → 计算机组成原理 → 操作系统 → 计算机网络。 理由：数据结构是基础，计组与OS关联性强，计网相对独立可后期突击。 另类顺序：操作系统（易入门）→ 计组（最难）→ 数据结构 → 计网（按状态调整，适合时间紧张者）。 复习阶段划分 基础阶段（3-6月）：通读教材+王道单科，完成选择题，标记错题。 强化阶段（7-9月）：二刷单科书，攻克大题（如PV操作、Cache设计、TCP协议等），结合真题专项练习。 冲刺阶段（10-12月）：限时模拟真题（至少2遍），查漏补缺，回归课本细节。 三、各科核心重点与学习方法 数据结构 重点：线性表、二叉树遍历、图算法（最短路径、关键路径）、排序与查找（快排、堆排、B树）。 技巧：算法题注重思想而非代码细节，用伪代码或简化解法即可。 计算机组成原理 重点：存储器层次、指令系统、CPU数据通路、中断与总线。 技巧：结合冯诺依曼结构理解整体流程，多画图辅助记忆（如Cache映射）。 操作系统 重点：进程调度、PV操作、死锁、虚拟内存（请求调页）、文件管理。 规律：PV操作隔年考，需掌握经典模型（如生产者-消费者）。 计算机网络 重点：传输层（TCP/UDP）、网络层（IP协议、路由算法）、数据链路层（CSMA/CD、MAC协议）。 技巧：自底向上分层学习，结合“送信”场景理解协议交互。 四、真题与模拟题使用要点 真题 重要性：至少刷2遍，近10年真题需限时模拟（14:00-17:00），分析错题关联知识点。 趋势：近年考题趋向跨科目综合（如OS与计组结合），需建立知识网络。 模拟题 王道模拟题难度贴近真题，天勤题目偏但可拓宽思路。 留1-2套考前模拟，保持手感。 五、常见误区与避坑指南 忽视课本：仅依赖辅导书易遗漏细节（如TCP协议图例中的英文术语），建议结合教材查缺。 盲目刷题：大题需专项突破，优先掌握高频题型（如算法思想、计组综合设计）。 时间分配不均：408需日均3小时以上，避免后期挤压其他科目（如政治）。 死记硬背：注重理解设计思想（如抽象、分层、缓冲），而非机械记忆。 六、时间规划参考（以7月为起点） 阶段 时间 任务 基础 7-8月 完成四科教材+王道单科一轮，选择题标记错题。 强化 9-10月 二刷单科书，专项攻克大题，开始真题分模块练习。 冲刺 11-12月 限时模拟真题+模拟题，回归课本查漏补缺。 七、心态与资源 心态：408内容多但规律性强，坚持按计划推进即可，避免焦虑。 资源整合：关注王道论坛、B站UP主（如“灰灰考研”）及公众号（如“计算机与软件考研”）获取最新资料。 以上经验整合自多位高分考生分享，需结合自身基础调整。更多细节可参考原文链接：王道论坛。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"专业课","slug":"专业课","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}]},{"title":"二重积分D对称性总结","slug":"get_high/二重积分D对称性总结","date":"2025-03-26T06:41:07.000Z","updated":"2025-03-26T06:43:01.452Z","comments":true,"path":"2025/03/26/get_high/二重积分D对称性总结/","permalink":"https://wwxnb261.github.io/2025/03/26/get_high/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86D%E5%AF%B9%E7%A7%B0%E6%80%A7%E6%80%BB%E7%BB%93/","excerpt":"二重积分D对称性总结","text":"在积分计算中，利用对称性可以大幅简化运算。以下是针对不同对称类型和被积函数奇偶性的总结，涵盖直角坐标系、极坐标系及常见注意事项： 一、直角坐标系下的对称性 1. 关于 $x$ 轴对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(x, -y) \\in D$。 被积函数奇偶性： 奇函数：$f(x, -y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(x, -y) = f(x, y)$ → 积分可简化为 2倍上半区域积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D y , dA$。 ∵ $y$ 是 $y$ 的奇函数 → 积分结果为 0。 2. 关于 $y$ 轴对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(-x, y) \\in D$。 被积函数奇偶性： 奇函数：$f(-x, y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(-x, y) = f(x, y)$ → 积分可简化为 2倍右半区域积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D x^3 , dA$。 ∵ $x^3$ 是 $x$ 的奇函数 → 积分结果为 0。 3. 关于原点对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(-x, -y) \\in D$。 被积函数奇偶性： 奇函数：$f(-x, -y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(-x, -y) = f(x, y)$ → 积分可简化为 4倍第一象限积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D xy , dA$。 ∵ $xy$ 是原点奇函数 → 积分结果为 0。 二、极坐标系下的对称性 1. 角度对称性（关于 $\\theta$ 对称） 区域条件：区域在极坐标中关于角度 $\\theta$ 对称（如圆形、扇形）。 被积函数特性： 若被积函数仅与 $r$ 有关（如 $f®$），则积分可简化为： $$ \\int_0^{2\\pi} \\int_0^R f® \\cdot r , dr , d\\theta = 2\\pi \\int_0^R f® \\cdot r , dr. $$ 示例： 计算 $\\iint_{x^2 + y^2 \\leq R^2} e^{-(x^2 + y^2)} , dA = 2\\pi \\int_0^R e^{-r^2} r , dr$。 2. 关于 $\\theta = \\pi/2$ 对称（直角坐标与极坐标结合） 区域条件：区域关于 $y = x$ 对称（如正方形、对称扇形）。 被积函数特性： 若 $f(x, y) = f(y, x)$，可简化积分范围为 $\\theta \\in [0, \\pi/4]$，再乘对称倍数。 示例： 区域 $D: 0 \\leq x \\leq 1, 0 \\leq y \\leq 1$，计算 $\\iint_D (x + y) , dA$。 可分解为两次单积分，无需对称性简化。 三、三重积分的对称性扩展 1. 关于坐标平面对称 区域条件：若点 $(x, y, z) \\in V$，则对称点 $(x, y, -z) \\in V$。 被积函数奇偶性： 奇函数：$f(x, y, -z) = -f(x, y, z)$ → 积分结果为 0。 偶函数：积分简化为 2倍上半空间积分。 2. 球对称区域 区域条件：球体 $x^2 + y^2 + z^2 \\leq R^2$。 被积函数特性： 若仅与半径 $r$ 有关（如 $f®$），积分可转换为球坐标系： $$ \\iiint_V f® , dV = 4\\pi \\int_0^R f® \\cdot r^2 , dr. $$ 四、注意事项与常见错误 场景 正确操作 常见错误 判断对称性 严格验证区域关于对称轴/面对称 误判非对称区域为对称区域 混合奇偶性函数 拆分函数为奇偶部分，分别处理（如 $f = f_{\\text{奇}} + f_{\\text{偶}}$） 未拆分直接应用对称性导致错误 极坐标/球坐标转换 检查雅可比行列式（极坐标：$r$，球坐标：$r^2 \\sin\\theta$） 遗漏体积元导致积分错误 多重积分对称性 逐层分析各变量对称性（如先对 $x$，再对 $y$） 同时处理多变量对称性导致混乱 五、总结公式表 对称类型 被积函数条件 积分结果 关于 $x$ 轴对称 $f(x, -y) = -f(x, y)$ 0 关于 $x$ 轴对称 $f(x, -y) = f(x, y)$ 2倍上半区域积分 关于 $y$ 轴对称 $f(-x, y) = -f(x, y)$ 0 关于 $y$ 轴对称 $f(-x, y) = f(x, y)$ 2倍右半区域积分 关于原点对称 $f(-x, -y) = -f(x, y)$ 0 关于原点对称 $f(-x, -y) = f(x, y)$ 4倍第一象限积分 球对称 $f®$ $4\\pi \\int_0^R f® r^2 , dr$ 核心结论： 对称性分析的关键在于 区域对称性 与 函数奇偶性 的匹配。通过拆分积分区域和函数，可快速简化计算或直接得出结果为零。始终优先验证对称条件，避免盲目应用公式！ ✅ 验证报告： 已转化行内公式：28处 已调整独立公式：5处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"反三角替换规则","slug":"get_high/反三角替换规则","date":"2025-03-26T03:38:52.000Z","updated":"2025-03-26T03:39:43.433Z","comments":true,"path":"2025/03/26/get_high/反三角替换规则/","permalink":"https://wwxnb261.github.io/2025/03/26/get_high/%E5%8F%8D%E4%B8%89%E8%A7%92%E6%9B%BF%E6%8D%A2%E8%A7%84%E5%88%99/","excerpt":"关于反三角函数的转换注意范围以及事项","text":"转换完成文档 在三角方程中，出现 $\\pi - \\arcsin x$ 的解是因为 正弦函数在 $[0, \\pi]$ 区间内的对称性。以下是详细解释： 1. 正弦函数的图像特性 正弦函数 $\\sin \\theta$ 在区间 $[0, \\pi]$ 内具有对称性： 当 $\\theta \\in \\left[ 0, \\frac{\\pi}{2} \\right]$，$\\sin \\theta$ 单调递增。 当 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\pi \\right]$，$\\sin \\theta$ 单调递减，且满足： $$ \\sin(\\pi - \\theta) = \\sin \\theta \\quad (\\theta \\in \\mathbb{R}). $$ 2. 方程 $\\sin \\theta = x$ 的解 对于方程 $\\sin \\theta = x$（其中 $x \\in [-1, 1]$），其解为： $$ \\theta = \\arcsin x + 2k\\pi \\quad \\text{或} \\quad \\theta = \\pi - \\arcsin x + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 原因： 主值解：$\\arcsin x$ 返回的是 $\\theta \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$ 的解。 对称性补充解：由于 $\\sin(\\pi - \\theta) = \\sin \\theta$，补充解为 $\\pi - \\arcsin x$，覆盖 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$ 的情况。 3. 几何解释（单位圆） 在单位圆上，若某角度的正弦值为 $x$，则存在两个可能的角度： 第一象限角：$\\theta_1 = \\arcsin x$（位于右半圆）。 第二象限角：$\\theta_2 = \\pi - \\arcsin x$（位于左半圆）。 这两个角度的正弦值相等（$\\sin \\theta_1 = \\sin \\theta_2 = x$），但余弦值相反（$\\cos \\theta_1 = -\\cos \\theta_2$）。 示例： 若 $\\sin \\theta = \\frac{1}{2}$，则解为： $$ \\theta = \\frac{\\pi}{6} \\quad \\text{或} \\quad \\theta = \\pi - \\frac{\\pi}{6} = \\frac{5\\pi}{6}. $$ 4. 实际应用场景 三角方程求解： 若要求 $\\theta \\in [0, \\pi]$，则需同时考虑 $\\arcsin x$ 和 $\\pi - \\arcsin x$。 示例：解三角形时，若已知两边及非夹角，可能有两解。 积分变量替换： 当通过 $x = \\sin \\theta$ 进行换元时，需根据积分区间选择正确的角度范围（例如，若 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\pi \\right]$，则需用 $\\pi - \\arcsin x$ 表示。 5. 常见误区 错误结论：认为 $\\arcsin x$ 能覆盖所有解，忽略对称性补充解。 错误推导：直接将 $\\sin \\theta = x$ 写为 $\\theta = \\arcsin x$，导致遗漏解。 总结 情境 表达式 意义 主值解（右半圆） $\\theta = \\arcsin x$ 角度位于 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 对称性补充解（左半圆） $\\theta = \\pi - \\arcsin x$ 角度位于 $\\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$。 核心结论： $\\pi - \\arcsin x$ 是方程 $\\sin \\theta = x$ 的必要补充解，用于覆盖正弦函数在单位圆上的对称性区域。 ✅ 验证报告： 已转化行内公式：13处 已调整独立公式：3处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"arcsin反三角替换的时候注意事项","slug":"get_high/arcsin反三角替换的时候注意事项","date":"2025-03-25T13:50:15.000Z","updated":"2025-03-25T13:55:29.972Z","comments":true,"path":"2025/03/25/get_high/arcsin反三角替换的时候注意事项/","permalink":"https://wwxnb261.github.io/2025/03/25/get_high/arcsin%E5%8F%8D%E4%B8%89%E8%A7%92%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%97%B6%E5%80%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"在将涉及 $\\sin x$ 的表达式转换为 $\\arcsin x$ 时，需注意以下关键事项： 1. 定义域与值域的限制 $\\arcsin x$ 的定义域：仅接受 $x \\in [-1, 1]$，超出此范围会导致无定义。 $\\arcsin x$ 的值域：输出角度范围为 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 示例： 若 $\\sin x = 2$，则方程无解，因为 $2 \\notin [-1, 1]$。 2. 解的多值性与主值选择 $\\sin x = y$ 的解： $$ x = \\arcsin y + 2k\\pi \\quad \\text{或} \\quad x = \\pi - \\arcsin y + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 直接写 $x = \\arcsin y$ 仅得到主值解（即 $x \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$），可能遗漏其他解。 示例： 方程 $\\sin x = \\frac{1}{2}$ 的解为： $$ x = \\frac{\\pi}{6} + 2k\\pi \\quad \\text{或} \\quad x = \\frac{5\\pi}{6} + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 3. 变量替换的合法性 替换 $y = \\sin x$ 时，需保证 $y \\in [-1, 1]$。 反向替换 $x = \\arcsin y$ 时，需明确 $x$ 的主值范围，避免超出 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 示例： 若 $y = \\sin x$ 且 $x \\in \\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$，则反向替换应写为 $x = \\pi - \\arcsin y$。 4. 代数运算中的常见错误 错误操作：直接对等式两边取 $\\arcsin$。 正确操作：需结合三角恒等式和多值性分析。 反例： 若 $\\sin x = \\sin y$，不能直接推出 $x = y$，而应为： $$ x = y + 2k\\pi \\quad \\text{或} \\quad x = \\pi - y + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 5. 微积分中的注意事项 导数公式： $$ \\frac{d}{dx} \\arcsin x = \\frac{1}{\\sqrt{1 - x^2}} \\quad (x \\in (-1, 1)). $$ 积分应用： 积分 $\\int \\frac{1}{\\sqrt{1 - x^2}} , dx = \\arcsin x + C$，仅在 $x \\in (-1, 1)$ 时有效。 6. 符号与平方根处理 表达式 $\\cos(\\arcsin x)$： 由于 $\\arcsin x \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$，余弦值非负，故： $$ \\cos(\\arcsin x) = \\sqrt{1 - x^2}. $$ 总结 操作 正确做法 常见错误 解方程 $\\sin x = y$ 考虑所有解：$x = \\arcsin y + 2k\\pi$ 或 $\\pi - \\arcsin y + 2k\\pi$ 仅写 $x = \\arcsin y$ 替换变量 $y = \\sin x$ 确保 $y \\in [-1, 1]$，并明确 $x$ 的范围 忽略 $y$ 的范围或 $x$ 的主值限制 导数/积分 检查定义域 $x \\in (-1, 1)$ 在 $x = \\pm 1$ 处错误应用公式 关键结论 始终验证输入值在 $[-1, 1]$ 内。 处理方程时考虑多值性，避免遗漏解。 在反向替换或运算中明确角度范围，确保结果合理性。 ✅ 验证报告： 已转化行内公式：17处 已调整独立公式：5处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"伽马函数的积分值","slug":"get_high/伽马函数的积分值","date":"2025-03-25T12:17:23.000Z","updated":"2025-03-25T13:27:13.898Z","comments":true,"path":"2025/03/25/get_high/伽马函数的积分值/","permalink":"https://wwxnb261.github.io/2025/03/25/get_high/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86%E5%80%BC/","excerpt":"伽马函数的积分值","text":"转换完成文档 这个积分过程的原理是通过变量替换将高斯积分转换为伽马函数（Gamma函数）的形式，从而利用已知的伽马函数值 $$\\Gamma\\left(\\frac{1}{2}\\right) = \\sqrt{\\pi}$$ 简化计算。以下是详细分析和关键步骤： 1. 原始积分分析 原积分形式为： $$ I = -\\int_{-\\infty}^{+\\infty} e^{-2x^2} , dx $$ 被积函数 (e^{-2x^2}) 是偶函数，且积分区间关于原点对称。因此可以将积分简化为两倍的 正半轴积分： $$ I = -2 \\int_{0}^{+\\infty} e^{-2x^2} , dx $$ 2. 变量替换（换元法） 令 (2x^2 = t)，则： $$ x = \\frac{1}{\\sqrt{2}} t^{1/2}, \\quad dx = \\frac{1}{2\\sqrt{2}} t^{-1/2} , dt $$ 替换变量后，积分变为： $$ I = -2 \\cdot \\frac{1}{2\\sqrt{2}} \\int_{0}^{+\\infty} e^{-t} \\cdot t^{-1/2} , dt = -\\frac{1}{\\sqrt{2}} \\int_{0}^{+\\infty} e^{-t} t^{-1/2} , dt $$ 3. 伽马函数的引入 积分 $$\\int_{0}^{+\\infty} e^{-t} t^{-1/2} , dt$$ 是伽马函数 $$\\Gamma\\left(\\frac{1}{2}\\right)$$ 的定义式： $$ \\Gamma(z) = \\int_{0}^{+\\infty} t^{z-1} e^{-t} , dt $$ 令 (z = \\frac{1}{2})，则： $$ \\Gamma\\left(\\frac{1}{2}\\right) = \\int_{0}^{+\\infty} t^{-1/2} e^{-t} , dt = \\sqrt{\\pi} $$ 4. 最终结果 代入伽马函数的值： $$ I = -\\frac{1}{\\sqrt{2}} \\cdot \\sqrt{\\pi} = -\\sqrt{\\frac{\\pi}{2}} $$ 关键步骤验证 偶函数对称性： 原积分区间对称，且被积函数为偶函数，因此可简化为两倍正半轴积分。 变量替换的合法性： 替换 $(2x^2 = t)$ 后，积分上下限从 $(x=0 \\to +\\infty)$ 变为 $(t=0 \\to +\\infty)$，且雅可比行列式 $(\\frac{dx}{dt})$ 计算正确。 伽马函数性质： $$\\Gamma\\left(\\frac{1}{2}\\right) = \\sqrt{\\pi}$$ 是已知结果，直接引用。 可能疑问与解答 为什么结果有负号？ 原始积分前有负号（即 $$I = -\\int_{-\\infty}^{+\\infty} \\dots$$），因此最终结果为负。若无负号，结果应为 $$\\sqrt{\\frac{\\pi}{2}}$$。 为何使用伽马函数？ 高斯积分 $$\\int_{0}^{+\\infty} e^{-ax^2} , dx$$ 的标准结果为 $$\\frac{1}{2} \\sqrt{\\frac{\\pi}{a}}$$，此处通过变量替换将其转换为伽马函数形式，结果一致。 结论 此过程通过变量替换和伽马函数的性质，将复杂的高斯积分转换为已知结果，最终得： $$ I = -\\sqrt{\\frac{\\pi}{2}} $$ 若原积分无负号，结果应为 $$\\sqrt{\\frac{\\pi}{2}}$$。 ✅ 验证报告： 已转化行内公式：6处 已调整独立公式：8处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"蓝桥杯抢分算法刷题","slug":"lanqiao/蓝桥杯抢分算法刷题","date":"2025-03-24T07:55:15.000Z","updated":"2025-03-25T13:24:06.023Z","comments":true,"path":"2025/03/24/lanqiao/蓝桥杯抢分算法刷题/","permalink":"https://wwxnb261.github.io/2025/03/24/lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%8A%A2%E5%88%86%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/","excerpt":"蓝桥杯抢分算法刷题","text":"蓝桥杯 7 天速成计划表（直接抄作业） Day1-3：暴力美学训练营 必杀技 1：三层 for 循环爆破 123456# 经典题解模式（以三数之和为例）for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if arr[i]+arr[j]+arr[k] == target: return [i,j,k] 必杀技 2：打表法空间换时打法 1234# 预生成斐波那契数列（打表法）fib = [0,1]for i in range(2,1000): fib.append(fib[i-1] + fib[i-2]) 每日任务： ✅ 暴力破解近 5 年真题 - 日期计算 ✅ 排列组合高频题 - 骰子概率问题 ✅ 简单数论题 - 质因数分解 Day4-7：DFS/BFS 急救包 万能模板（迷宫问题） 123456def dfs(当前状态): if 终止条件: return visited[x][y] = True for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]: dfs(x+dx, y+dy) 重点题型： ▨ 全排列问题（注意剪枝） ▨ 迷宫问题 ▨ 岛屿数量（行列扫描） ▨ 路径计数（记忆化搜索） 保命技巧：遇到递归超时的时候立即转记忆化搜索 三、最后 13 天抢分攻略 📅 每日作息表 时间 任务 工具 7:00-8:30 背模板 + 重写错题 错题本 + A4 纸手写 9:00-12:00 专题突破（优先 DP 基础） 蓝桥杯官方训练系统 14:00-17:00 全真模考（严格计时） 2019-2021 年真题 20:00-22:30 精研答案 + 优化代码 GitHub 大佬题解对比 🚑 五大必考题型急救指南 ① 动态规划（带注释模板） $$ dp[i] = \\max(dp[i-1], dp[i-2]+nums[i]) $$ 只背0-1背包和爬楼梯模板 1234567# 0-1背包标准代码def knapsack(W, wt, val): dp = [0]*(W+1) for i in range(len(wt)): for j in range(W, wt[i]-1, -1): dp[j] = max(dp[j], dp[j-wt[i]] + val[i]) return dp[W] ② 贪心算法（20%命中率） 记住三个经典场景：区间调度、哈夫曼编码、加油站问题 ③ 字符串处理（必考） Python组直接暴力切片，C++组背书substr+正则表达式基础 ④简单数论（30%命中率） 重点掌握：最大公约数、最小公倍数、闰年判断、质数筛选法 ⑤ 日期计算（每年必出：背熟蔡勒公式） 1234567# 星期计算公式def zeller(y, m, d): if m &lt; 3: m += 12 y -= 1 h = (d + 13*(m+1)//5 + y + y//4 - y//100 + y//400) % 7 return [&quot;六&quot;,&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;][h] 四、考场偷分黑科技 玄学输出 遇到不会的题直接输出样例： 1print(&quot;3\\n1 4 5&quot;) # 样例答案格式 输入加速（C++ 版） 12ios::sync_with_stdio(false); cin.tie(0); // 加速 300% 卡时间神操作 123[!WARNING]▨ 最后 5 分钟必须检查换行符▨ 用文本对比工具验证输出格式 博弈论精髓：蓝桥杯是策略游戏而非能力测试，当你开始执行本计划时，已战胜 50% 的裸考者。立即启动暴力美学程序冲击省奖！","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://wwxnb261.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"考研记录3月1日","slug":"get_high/考研记录3月1日","date":"2025-03-21T07:45:41.000Z","updated":"2025-03-25T13:24:29.795Z","comments":true,"path":"2025/03/21/get_high/考研记录3月1日/","permalink":"https://wwxnb261.github.io/2025/03/21/get_high/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%953%E6%9C%881%E6%97%A5/","excerpt":"考研规划记录","text":"由于今日起晚了，所以重新规划1和2号的学习安排 3月1日（剩余时间：16:30-24:00） 总目标：完成数学极限核心概念+数据结构线性表基础 总时长：7.5小时（含休息） 16:30-19:00：数学极限基础（2.5h） 任务： 速看张宇/武忠祥极限基础课（1h，1.5倍速，重点听“泰勒展开”和“洛必达法则”） 刷《复习全书》极限例题（3道经典题，如“sinx/x→1的证明”、“∞-∞型极限计算”） 整理极限公式表（手写：等价无穷小替换、泰勒公式到x³项） 重点： 确保理解极限计算逻辑，暂不追求刷题量，先掌握核心方法。 19:30-21:30：数据结构线性表（2h） 任务： 学习顺序表与链表的区别（王道教材2.1-2.2节，30分钟） 手写单链表反转代码（LeetCode 206，反复写3遍直到无bug，1h） 做王道选择题（仅做“链表插入删除”相关题，5道，30分钟） 重点： 必须能默写链表反转代码，理解指针操作逻辑。 21:30-24:00：数学极限巩固+错题（2.5h） 任务： 刷《660题》极限部分（精选10题，题号1-10，1h） 分析错题（记录错题原因，如“泰勒展开项数不足”，30分钟） 默写公式+明早复习清单（30分钟） 3月2日（全天） 总目标：完成数学导数基础+数据结构栈与队列 总时长：12小时（含休息） 8:30-11:30：数学导数与微分（3h） 任务： 武忠祥导数应用视频（1.5h，重点看“导数定义”和“极值判定”） 手写导数公式表（包括参数方程求导、隐函数求导，30分钟） 刷《660题》导数部分（题号31-40，5题，1h） 14:00-17:00：数据结构栈与队列（3h） 任务： 栈的应用（括号匹配原理，手写代码：LeetCode 20，1h） 循环队列实现（重点：判空条件front == rear，判满条件(rear+1)%size == front，1h） 用栈实现队列（LeetCode 232，1h） 19:00-21:00：数学导数强化（2h） 任务： 总结“证明题”构造辅助函数的方法（如用罗尔定理证明根的存在性，1h） 重做错题+整理导数应用框架（如极值、凹凸性、渐近线，1h） 21:30-23:30：数据结构真题+复盘（2h） 任务： 做408真题（2016年数据结构选择题）（10题，30分钟） 手写循环队列代码（确保能处理边界条件，1h） 复盘今日内容（记录栈与队列易错点，如指针越界，30分钟） 调整后重点变化 删减内容： 原计划Day2的积分学习推迟到Day3，优先保住导数基础。 数据结构减少理论阅读时间，以代码实操为主。 保核心： 数学：极限计算、导数定义与应用 数据结构：链表反转、栈的应用 灵活补救： 若3月2日晚未完成导数全部任务，3月3日早晨优先补“极值判定”部分。 执行提醒 极限/导数公式表：3月2日早晨花20分钟默写，加强短期记忆。 代码手写：必须落实！哪怕写不出也先抄答案再默写，注重过程。 睡眠保证：3月1日晚尽量24:00前睡，3月2日早晨8:00起，避免连续熬夜。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"极坐标下的二重积分的范围确定","slug":"get_high/极坐标下的二重积分的范围确定","date":"2025-03-10T08:50:48.000Z","updated":"2025-03-25T13:27:04.926Z","comments":true,"path":"2025/03/10/get_high/极坐标下的二重积分的范围确定/","permalink":"https://wwxnb261.github.io/2025/03/10/get_high/%E6%9E%81%E5%9D%90%E6%A0%87%E4%B8%8B%E7%9A%84%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%8C%83%E5%9B%B4%E7%A1%AE%E5%AE%9A/","excerpt":"","text":"1. 极坐标的基本概念 极坐标系中用 $r$ 或 ( $ρ$ )表示点到原点的距离， ( $\\theta$ ) 表示与极轴$（通常是x轴正方向）$的夹角。 面积元素：直角坐标的 $dx,dy$ 转换为极坐标时需乘以雅可比行列式，变为 $r,dr,dθ$。 符号习惯：$r$ 和 $ρ$ 在教材中可能交替使用，本质是同一变量，代表径向距离。 2. 积分范围的确定原则 (1) 简单区域（如圆形） 例：积分区域为半径 $a$ 的圆 $x^2 + y^2 \\leq a^2$。 ( r ) 的范围：$0 \\leq r \\leq a$。 $\\theta$ 的范围：$0 \\leq \\theta \\leq 2\\pi$。 积分表达式为： $$ \\int_{0}^{2\\pi} \\int_{0}^{a} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ (2) 复杂区域（如扇形或环形） 例：积分区域为环形 $1 \\leq r \\leq 2$ 且 $\\pi/4 \\leq \\theta \\leq \\pi/2$。 ( r ) 的范围：由内半径和外半径确定，即 $1 \\leq r \\leq 2$。 $\\theta$ 的范围：由角度区间确定，即 $\\pi/4 \\leq \\theta \\leq \\pi/2$。 积分表达式为： $$ \\int_{\\pi/4}^{\\pi/2} \\int_{1}^{2} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ (3) 依赖角度的径向范围 例：积分区域为心脏线 $r = 1 + \\cos\\theta$。 ( r ) 的范围：对每个固定的 $\\theta$，$r$ 从 $0$ 到 $1 + \\cos\\theta$。 $\\theta$ 的范围：覆盖整个心脏线，即 $0 \\leq \\theta \\leq 2\\pi$。 积分表达式为： $$ \\int_{0}^{2\\pi} \\int_{0}^{1+\\cos\\theta} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ 3. 关键注意事项 (1) 雅可比行列式不可忽略 极坐标面积元素必须包含 ( r ) ，否则积分结果错误。例如： $$ \\iint_D f(x,y) , dx,dy \\quad \\Rightarrow \\quad \\iint_{D’} f(r\\cos\\theta, r\\sin\\theta) \\cdot \\textcolor{red}{r} , dr,d\\theta $$ (2) 变量范围的几何依赖性 ( r ) 的范围由积分区域的边界方程（如 $r = g(\\theta)$）确定。 ( $\\theta$ ) 的范围由区域的覆盖角度决定，可能需要分段处理。 (3) 符号统一性 若教材使用 $ρ$ 代替 $r$，只需保持符号一致，例如： $$ \\int_{\\theta_1}^{\\theta_2} \\int_{\\rho_1(\\theta)}^{\\rho_2(\\theta)} f(\\rho,\\theta) \\cdot \\rho , d\\rho , d\\theta $$ 4. 常见误区 误区1：认为 $r$ 可以随意设为常数范围（如 $0 \\leq r \\leq 1$），而忽略实际区域形状。 纠正：必须根据区域几何确定 $r$ 的上下限（可能依赖 $θ$）。 误区2：忽略 $r$ 导致面积元素错误（如写成 $dr,dθ$ 而非 $r,dr,dθ$）。 纠正：始终记得雅可比行列式带来的 $r$ 因子。 5. 总结 ( r ) 或 ( $\\rho$ ) 的范围不是随意设定，而是由积分区域的几何形状（如圆形、扇形、曲线边界等）决定。 正确步骤： 画出积分区域图，分析边界方程； 确定 $r$ 的最小和最大值（可能随 $\\theta$ 变化）； 确定 $\\theta$ 的覆盖范围； 写出完整的积分表达式，包含 $r,dr,dθ$。 通过结合几何直观和边界方程，可以准确设定极坐标下的积分范围。 ✅ 验证报告： 已转化行内公式：24处 已调整独立公式：4处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"函数的连续，可导，可微辨析","slug":"get_high/函数的连续，可导，可微辨析","date":"2025-03-09T07:46:50.000Z","updated":"2025-03-25T13:26:55.616Z","comments":true,"path":"2025/03/09/get_high/函数的连续，可导，可微辨析/","permalink":"https://wwxnb261.github.io/2025/03/09/get_high/%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%EF%BC%8C%E5%8F%AF%E5%AF%BC%EF%BC%8C%E5%8F%AF%E5%BE%AE%E8%BE%A8%E6%9E%90/","excerpt":"函数的连续，可导，可微辨析","text":"当一个函数的题目给出条件为：函数在区间内有定义的话，并不意味着该函数是连续的。 当提到函数在区间内有定义，这只表示该区间内的每个点都有对应的函数值，但这并不保证函数是连续的。以下是几个关键点： 函数有定义与连续性的区别 函数有定义: 对于区间内的每一点 x，函数 f(x) 都有一个确定的值 函数连续: 除了在每点有定义外，还要求 lim(x→a) f(x) = f(a) 反例说明 考虑函数： $$ f(x) = \\begin{cases} 1, & x \\geq 0 \\\\ -1, & x < 0 \\end{cases} $$ 该函数在整个实数轴上有定义，但在 x = 0 处不连续，因为左右极限不相等。 考研中的应用 在解题时，当仅给出函数在区间内有定义的条件时，需要额外检验函数的连续性，特别是在： 讨论函数的可导性时（连续是可导的必要条件） 应用中值定理、罗尔定理等需要连续性的定理时 计算定积分时（被积函数需要连续） 连续、可导、可微的关系 理解这三者之间的关系是数学分析中的重要内容： 可导 → 连续: 如果函数在某点可导，则函数在该点必定连续 连续 ↛ 可导: 函数连续不一定可导，如 f(x) = |x| 在 x = 0 处连续但不可导 一元函数中: 可导与可微等价 多元函数中: 偏导数存在不保证函数可微 函数有定义只是讨论函数性质的起点，进一步分析连续性、可导性和可微性对于理解函数行为至关重要。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"函数连续中的间断点类型总结","slug":"get_high/函数连续中的间断点类型总结","date":"2025-03-04T07:46:21.000Z","updated":"2025-03-25T13:26:08.911Z","comments":true,"path":"2025/03/04/get_high/函数连续中的间断点类型总结/","permalink":"https://wwxnb261.github.io/2025/03/04/get_high/%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E4%B8%AD%E7%9A%84%E9%97%B4%E6%96%AD%E7%82%B9%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/","excerpt":"函数连续中的间断点类型总结","text":"间断点的类型主要根据函数在该点的极限行为进行分类，以下是详细的分类及说明： 1. 第一类间断点（左右极限均存在） (a) 可去间断点（Removable Discontinuity） 特点： 函数在该点的左极限和右极限存在且相等，但函数值不等于该极限，或函数在该点无定义。 通过重新定义或修正函数值可使函数在该点连续。 示例： $f(x) = \\frac{\\sin x}{x} \\quad (x \\neq 0)$ 在 $\\ ( x=0 )$ 处无定义，但 $\\ (\\lim_{x \\to 0} f(x) = 1)$，补充定义 $\\ ( f(0) = 1 )$ 后连续。 (b) 跳跃间断点（Jump Discontinuity） 特点： 左极限和右极限均存在，但两者不相等。 函数图像在该点出现“跳跃”。 示例： $\\ [ f(x) = \\begin{cases} x + 1 &amp; x \\geq 0, \\ x - 1 &amp; x &lt; 0 \\end{cases} ]$ 在 $\\ ( x=0 )$ 处，左极限为 $\\ (-1)$，右极限为 $\\ (1)$，形成跳跃。 2. 第二类间断点（至少一侧极限不存在） 以下是第二类间断点的两个主要类型： (a) 无穷间断点（Infinite Discontinuity） 特点： 当 x 趋近于该点时，函数值趋向正无穷或负无穷。 通常伴随垂直渐近线。 示例：当 x → 0 时，函数 $f(x) = \\frac&#123;1&#125;&#123;x&#125;$ 的值趋向 ±∞。 (b) 振荡间断点（Oscillatory Discontinuity） 特点： 函数在该点附近无限振荡，导致极限不存在。 常见于涉及三角函数或周期函数的复杂表达式中。 示例：考虑函数 $f(x) = sin(\\frac&#123;1&#125;&#123;x&#125;)$ 当 x → 0 时，函数值在 [-1,1] 之间无限振荡，因此极限不存在。 3. 其他特殊类型（补充说明） 混合型间断点 特点： 结合多种不连续行为，例如一侧趋向无穷，另一侧振荡。 示例： $\\ f(x) = \\begin{cases} \\frac{1}{x} &amp; x &gt; 0, \\ \\sin\\left(\\frac{1}{x}\\right) &amp; x &lt; 0 \\end{cases}$ 在 $\\ ( x=0 )$ 处，右侧趋向 $\\ ( +\\infty )，$左侧振荡。 本质不连续点（Essential Discontinuity） 别名：部分文献将第二类间断点统称为本质不连续点。 总结表格 类型 特点 示例 可去间断点 极限存在但函数值不符未定义 $\\ \\frac{\\sin x}{x}$ 跳跃间断点 左右极限存在但不相等 分段函数跳跃点 无穷间断点 函数趋向无穷大或无穷小 $\\ \\frac{1}{x}$ 振荡间断点 函数无限振荡，极限不存在 $\\ \\sin\\left(\\frac{1}{x}\\right)$ 关键区别 第一类 vs 第二类： 第一类间断点的左右极限均存在（可比较大小），第二类至少一侧不存在或趋向无穷。 可修复性： 仅可去间断点可通过修正函数值恢复连续性。 通过以上分类，可系统分析函数在不同点的不连续行为。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"3月份半个月学习计划","slug":"get_high/3月份半个月学习计划","date":"2025-03-01T07:31:35.000Z","updated":"2025-03-28T11:01:42.230Z","comments":true,"path":"2025/03/01/get_high/3月份半个月学习计划/","permalink":"https://wwxnb261.github.io/2025/03/01/get_high/3%E6%9C%88%E4%BB%BD%E5%8D%8A%E4%B8%AA%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","excerpt":"","text":"以下是重新优化后的15天考研数学一（高数核心）与数据结构系统学习计划，移除概率论，全面覆盖高数重点章节（包括多元微积分、曲线曲面积分、无穷级数等），并保持数据结构每日3-4小时系统学习。计划按**&quot;基础-强化-综合&quot;三阶段**推进，确保扎实掌握。 调整后核心策略 优先级：数学一高数（70%）+ 数据结构（30%），每天学习10-12小时 高数重点：极限→一元微积分→多元微积分→重积分→曲线曲面积分→级数→微分方程 数据结构：线性表→树→图→排序/查找→真题，每日代码实操 学习逻辑：视频+教材+题型分类+错题本，拒绝遗漏核心考点 每日作息强化版 时间段 内容 7:00-8:00 起床+背诵公式（如格林公式、DFS代码模板） 8:30-12:00 数学攻坚（视频+例题） 14:00-17:00 数据结构系统学习（教材+代码） 19:00-21:00 数学/数据结构交叉刷题 21:30-22:30 错题整理+Anki记忆卡 第一阶段：基础框架搭建（Day 1-5） Day 1-2：高数极限与连续 + 数据结构线性表 数学任务（每天7小时）： 上午4h： 张宇/武忠祥极限视频（1.5倍速，重点：泰勒展开、夹逼定理） 《复习全书》例题（极限存在性证明、∞/∞型计算） 下午2h： 刷《660题》极限部分（题1-30）+ 错题整理 晚上1h： 默写等价无穷小替换表、泰勒公式到x³项 数据结构（每天3小时）： 下午穿插2h： 顺序表与链表操作（插入/删除时间复杂度） 手写代码：单链表反转（LeetCode 206）、合并有序链表（LeetCode 21） 晚上1h： 王道选择题（链表特性与应用场景） Day 3-4：高数一元微分学 + 数据结构栈与队列 数学任务（每天7小时）： 上午4h： 武忠祥导数应用视频（极值、凹凸性、渐近线） 《复习全书》例题（中值定理证明题） 下午2h： 刷《660题》导数部分（题31-60）+ 总结辅助函数构造法 晚上1h： 整理导数公式表（参数方程、隐函数求导） 数据结构（每天3小时）： 下午穿插2h： 栈实现队列（LeetCode 232）、循环队列判满/判空 手写代码：括号匹配（LeetCode 20） 晚上1h： 王道选择题（栈与队列的典型应用） Day 5：高数一元积分学 + 数据结构树基础 数学任务（7小时）： 上午4h： 张宇积分技巧视频（分部积分、三角代换） 《复习全书》例题（定积分几何应用、反常积分） 下午2h： 刷《660题》积分部分（题81-110） 晚上1h： 整理积分公式表（如∫√(a²-x²)dx） 数据结构（3小时）： 下午穿插2h： 二叉树遍历（先序/中序递归与非递归） 手写代码：中序非递归遍历（栈实现） 晚上1h： 王道选择题（二叉树节点数计算） 第二阶段：高数核心强化（Day 6-10） Day 6-7：高数多元微分学 + 数据结构树应用 数学任务（每天7小时）： 上午4h： 武忠祥多元微分视频（偏导数、全微分、方向导数） 《复习全书》例题（隐函数求导、条件极值） 下午2h： 刷《660题》多元微分部分（题200-230） 晚上1h： 总结梯度、方向导数与极值的关系 数据结构（每天3小时）： 下午穿插2h： 平衡二叉树（AVL树旋转）、二叉搜索树验证（LeetCode 98） 晚上1h： 王道选择题（AVL树插入调整步骤） Day 8-9：高数重积分 + 数据结构图基础 数学任务（每天7小时）： 上午4h： 张宇重积分视频（二重/三重积分计算、极坐标/柱坐标变换） 《复习全书》例题（交换积分次序、奇偶性简化） 下午2h： 刷《660题》重积分部分（题240-270） 晚上1h： 整理对称性简化技巧（如轮换对称性） 数据结构（每天3小时）： 下午穿插2h： 图的存储（邻接矩阵/邻接表）、DFS/BFS代码实现 手写代码：课程表拓扑排序（LeetCode 207） 晚上1h： 王道选择题（DFS与BFS应用场景） Day 10：高数曲线曲面积分 + 数据结构排序算法 数学任务（7小时）： 上午4h： 武忠祥曲线积分视频（第一/二型曲线积分、格林公式） 《复习全书》例题（参数化计算、斯托克斯公式） 下午2h： 刷《660题》曲线曲面积分部分（题280-310） 晚上1h： 总结高斯公式与散度、旋度的联系 数据结构（3小时）： 下午穿插2h： 快速排序/堆排序非递归实现、稳定性分析 手写代码：快速排序分区函数（Hoare法） 晚上1h： 王道选择题（排序算法时间复杂度对比） 第三阶段：综合冲刺（Day 11-15） Day 11-12：高数无穷级数 + 数据结构查找算法 数学任务（每天7小时）： 上午4h： 张宇级数视频（正项级数、幂级数求和、傅里叶级数） 《复习全书》例题（收敛性判别、展开式求系数） 下午2h： 刷《660题》级数部分（题320-350） 晚上1h： 整理常见展开式（如1/(1-x)=∑xⁿ, |x|&lt;1） 数据结构（每天3小时）： 下午穿插2h： 哈希表冲突处理（拉链法、开放定址法） 手写代码：LRU缓存（LeetCode 146） 晚上1h： 王道选择题（B树与B+树差异） Day 13-14：高数真题模拟 + 数据结构真题 数学任务（每天7小时）： 限时3h完成2020年真题 4h逐题分析错因（重点：曲线积分与级数大题） 数据结构（每天3小时）： 下午穿插2h： 408真题（2015-2020数据结构大题） 重点：二叉树非递归遍历、图最短路径 晚上1h： 复盘代码边界条件（如指针判空、循环终止） Day 15：总复习与补漏 数学（7小时）： 上午4h：默写核心公式（从极限到曲面积分） 下午3h：重做高数错题（如格林公式应用） 数据结构（3小时）： 系统复盘线性表→图→排序 手写代码：二叉树层序遍历（LeetCode 102） 每日作息强化版 时间段 内容 7:00-8:00 起床+背诵公式（如格林公式、DFS代码模板） 8:30-12:00 数学攻坚（视频+例题） 14:00-17:00 数据结构系统学习（教材+代码） 19:00-21:00 数学/数据结构交叉刷题 21:30-22:30 错题整理+Anki记忆卡 关键执行原则 高数优先级：若时间紧张，优先完成曲线曲面积分和级数，这两部分是数一特有且难度较高的考点 数据结构代码：每日至少手写1题，重点训练非递归遍历和算法应用（如拓扑排序） 错题本：按章节分类记录错题，每晚睡前回顾10分钟 健康管理：每学习1小时休息5分钟，每天保证6小时睡眠 按此计划，15天内可系统攻克高数全部核心内容，并保持数据结构代码手感！ 如需进一步细化某部分（如曲线积分参数化方法），请随时告知！","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"每天一题蓝桥杯：报数游戏","slug":"lanqiao/每天一题蓝桥杯：报数游戏","date":"2024-10-16T14:01:16.000Z","updated":"2024-10-17T07:59:19.411Z","comments":true,"path":"2024/10/16/lanqiao/每天一题蓝桥杯：报数游戏/","permalink":"https://wwxnb261.github.io/2024/10/16/lanqiao/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%9A%E6%8A%A5%E6%95%B0%E6%B8%B8%E6%88%8F/","excerpt":"","text":"今日蓝桥杯题目 小蓝和朋友们在玩一个报数游戏。由于今年是2024 年，他们决定要从小到大轮流报出是20 或 24倍数的正整数。前10 个被报出的数是：20,24,40,48,60,72,80,96,100,120。请问第202420242024 个被报出的数是多少? 问题背景 目标：找出第 ( n ) 个是 20 或 24 的倍数的正整数，按从小到大的顺序排列，且不重复。 示例： 前10个被报出的数是：20, 24, 40, 48, 60, 72, 80, 96, 100, 120。 为什么使用二分查找？ 在处理这样的问题时，直接枚举所有满足条件的数直到找到第 ( n ) 个数是不现实的，尤其当 ( n ) 很大（如 ( n = 202420242024 )）时。因此，我们需要一种更高效的方法来定位目标数的位置。二分查找 是一种适合此类问题的高效算法。 二分查找的基本原理 二分查找 是一种在有序数组中查找特定元素的算法，其基本思想是通过不断将搜索范围缩小一半来快速定位目标元素。虽然在这个问题中，我们不是在一个固定的数组中查找元素，而是在一个按特定规则生成的数列中查找第 ( n ) 个元素，但二分查找的思想仍然适用。 应用于本问题的二分查找步骤 定义搜索范围： 左界（Left）：最小可能的数，通常设为 1。 右界（Right）：最大可能的数，可以初步设为 $( n \\times \\text{max}(a, b) )$。在本例中，( a = 20 )，( b = 24 )，所以右界可以设为 ( n \\times 24 )。 计算中点： 计算当前搜索范围的中点 $( \\text{mid} = \\left\\lfloor \\frac{\\text{left} + \\text{right}}{2} \\right\\rfloor )$。 计算中点位置的满足条件的数的数量： 使用容斥原理计算不超过 $( \\text{mid} )$ 的 20 或 24 的倍数的数量 $( C(\\text{mid}) )$： $$ C(\\text{mid}) = \\left\\lfloor \\frac{\\text{mid}}{20} \\right\\rfloor + \\left\\lfloor \\frac{\\text{mid}}{24} \\right\\rfloor - \\left\\lfloor \\frac{\\text{mid}}{120} \\right\\rfloor $$ 其中，120 是 20 和 24 的最小公倍数（LCM）。 调整搜索范围： 如果 $( C(\\text{mid}) &lt; n )$： 说明第 ( n ) 个数位于 ( \\text{mid} ) 右侧，因此将左界设为 ( \\text{mid} + 1 )。 否则（$( C(\\text{mid}) \\geq n )$： 说明第 $( n ) 个数位于 ( \\text{mid} )$ 左侧或就是 $( \\text{mid} )$，因此将右界设为 $( \\text{mid} )$。 重复步骤 2-4，直到左界等于右界。 最终结果： 当左界与右界相等时，该值即为第 ( n ) 个满足条件的数。 为什么 $( C(x) &lt; n ) 表示 ( x )$ 太小？ 定义计数函数 $( C(x) )$ 对于任意正整数 ( x )，( C(x) ) 表示不超过 ( x ) 的数中，既是 20 或 24 的倍数的数的数量： $$ C(x) = \\left\\lfloor \\frac{x}{20} \\right\\rfloor + \\left\\lfloor \\frac{x}{24} \\right\\rfloor - \\left\\lfloor \\frac{x}{120} \\right\\rfloor $$ 二分查找的目标 我们希望找到最小的 ( x )，使得 ( C(x) = n )。换句话说，找到第 ( n ) 个满足条件的数，即第 ( n ) 个 20 或 24 的倍数。 搜索过程中的判断 如果 $( C(\\text{mid}) &lt; n )$： 说明在 ( 1 ) 到 $( \\text{mid} )$ 之间，只有 $( C(\\text{mid}) )$ 个数满足条件，但我们需要第 ( n ) 个数。 因此，第 ( n ) 个数 必定大于 $( \\text{mid} )$。 结论：当前的 $( \\text{mid} )$ 太小，无法包含第 ( n ) 个数，需要在更大的范围内继续搜索。 如果 $( C(\\text{mid}) \\geq n )$： 说明第 ( n ) 个数 可能在 $( \\text{mid} )$ 之前，也可能就是 $( \\text{mid} )$ 本身。 结论：需要在较小的范围内继续搜索，缩小右界。 直观理解 想象一下你正在寻找一个特定位置的数，例如第1000个满足条件的数。通过二分查找，你每次选择一个中间值并计算在这个中间值之前有多少个满足条件的数： 如果计算出的数量 $( C(\\text{mid}) )$ 比目标 ( n ) 小，说明第 ( n ) 个数还没到，需要往更大的方向看。 如果计算出的数量 $( C(\\text{mid}) )$ 大于或等于目标 ( n )，说明目标数已经在 $( \\text{mid} )$ 或更小的范围内，可以缩小搜索范围，继续在较小的范围内寻找精确的位置。 示例演示 目标：找到第10个是 20 或 24 的倍数的数。 初始化搜索范围： 左界 $( \\text{left} = 1 )$ 右界 $( \\text{right} = 10 \\times 24 = 240 )（初步设定为 ( n \\times \\text{max}(a, b) )）$ 第一次迭代： 中点 $( \\text{mid} = \\left\\lfloor \\frac{1 + 240}{2} \\right\\rfloor = 120 )$ 计算 ( C(120) )： $$ C(120) = \\left\\lfloor \\frac{120}{20} \\right\\rfloor + \\left\\lfloor \\frac{120}{24} \\right\\rfloor - \\left\\lfloor \\frac{120}{120} \\right\\rfloor = 6 + 5 - 1 = 10 $$ 比较 ( C(120) = 10 ) 与 ( n = 10 )： 因为 $( C(120) \\geq n )$，将右界设为 ( 120 )。 第二次迭代： 新的搜索范围：$( \\text{left} = 1 )$，$( \\text{right} = 120 )$ 中点 $( \\text{mid} = \\left\\lfloor \\frac{1 + 120}{2} \\right\\rfloor = 60 )$ 计算 ( C(60) )： $$ C(60) = \\left\\lfloor \\frac{60}{20} \\right\\rfloor + \\left\\lfloor \\frac{60}{24} \\right\\rfloor - \\left\\lfloor \\frac{60}{120} \\right\\rfloor = 3 + 2 - 0 = 5 $$ 比较 ( C(60) = 5 ) 与 ( n = 10 )： 因为 ( C(60) &lt; n )，将左界设为 ( 61 )。 第三次迭代： 新的搜索范围：$( \\text{left} = 61 )$，$( \\text{right} = 120 )$ 中点 $( \\text{mid} = \\left\\lfloor \\frac{61 + 120}{2} \\right\\rfloor = 90 )$ 计算 ( C(90) )： $$ C(90) = \\left\\lfloor \\frac{90}{20} \\right\\rfloor + \\left\\lfloor \\frac{90}{24} \\right\\rfloor - \\left\\lfloor \\frac{90}{120} \\right\\rfloor = 4 + 3 - 0 = 7 $$ 比较 ( C(90) = 7 ) 与 ( n = 10 )： 因为 ( C(90) &lt; n )，将左界设为 ( 91 )。 继续迭代，直到左界等于右界： 最终会发现，当 $( \\text{left} = 120 )$ 时，( C(120) = 10 )，满足条件。 结果：( x = 120 ) 验证结果： 前10个数确实是：20, 24, 40, 48, 60, 72, 80, 96, 100, 120。 因此，算法正确地找到了第10个数是 120。 为什么二分查找有效？ 有序性：满足条件的数按升序排列，二分查找依赖于这一特性，通过比较中点位置的数的数量与目标 ( n ) 之间的关系，逐步缩小搜索范围。 效率：二分查找的时间复杂度为 $( O(\\log N) )$，远比线性搜索（时间复杂度 ( O(N) )）高效，特别是在 ( N ) 很大的情况下。 二分查找在此问题中的关键点 定义搜索范围： 初始左界设为 1，右界设为 $( n \\times \\text{max}(a, b) )$。 在本例中，( a = 20 )，( b = 24 )，所以右界可以设为 $( n \\times 24 )$。 中点计算与比较： 通过计算中点 $( \\text{mid} )$ 的位置，利用容斥原理计算不超过 $( \\text{mid} )$ 的满足条件的数的数量 $( C(\\text{mid}) )$。 如果 $( C(\\text{mid}) &lt; n )$，则更新左界为 $( \\text{mid} + 1 )$。 否则，将右界设为 $( \\text{mid} )$。 终止条件： 当左界等于右界时，搜索结束，左界（或右界）即为第 ( n ) 个满足条件的数。 解决代码示例 以下是一个完整的 Python 实现，结合了二分查找和容斥原理，用于精确找到第 ( n ) 个是 a 或 b 的倍数的数。 1234567891011121314151617181920212223242526272829303132333435def lcm(a, b): &quot;&quot;&quot;计算两个数的最小公倍数&quot;&quot;&quot; from math import gcd return a * b // gcd(a, b)def count_multiples(x, a, b): &quot;&quot;&quot;计算不超过 x 的 a 或 b 的倍数的数量&quot;&quot;&quot; return x // a + x // b - x // lcm(a, b)def find_nth_number(n, a, b): &quot;&quot;&quot;使用二分查找找到第 n 个是 a 或 b 的倍数的数&quot;&quot;&quot; left = 1 right = n * max(a, b) # 初始右界设为 n * max(a, b) while left &lt; right: mid = (left + right) // 2 current_count = count_multiples(mid, a, b) if current_count &lt; n: left = mid + 1 else: right = mid return left# 示例 1: 寻找第 202420242024 个是 20 或 24 的倍数的数n = 202420242024a = 20b = 24result = find_nth_number(n, a, b)print(f&quot;第 &#123;n&#125; 个被报出的数是: &#123;result&#125;&quot;) # 输出: 2429042904288# 示例 2: 寻找第 1000 个是 10 或 15 的倍数的数n = 1000a = 10b = 15result = find_nth_number(n, a, b)print(f&quot;第 &#123;n&#125; 个被报出的数是: &#123;result&#125;&quot;) # 输出: 7500","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"},{"name":"二分","slug":"二分","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%88%86/"}]},{"title":"每天一题蓝桥杯：单词博弈","slug":"lanqiao/每天一题蓝桥杯：单词游戏博弈","date":"2024-10-15T13:12:03.000Z","updated":"2024-10-16T15:04:25.655Z","comments":true,"path":"2024/10/15/lanqiao/每天一题蓝桥杯：单词游戏博弈/","permalink":"https://wwxnb261.github.io/2024/10/15/lanqiao/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%9A%E5%8D%95%E8%AF%8D%E6%B8%B8%E6%88%8F%E5%8D%9A%E5%BC%88/","excerpt":"","text":"今日蓝桥杯题目 夏日夜晚，小蓝和小桥在蓝桥公园散步。在蜿蜒的小路上，他们发现了一堆单词。 小蓝和小桥对这些单词饶有兴致，于是开始收集它们：小蓝收集了n 个单词，小桥收集了m 个单词。收集完单词后，他们决定玩一个游戏。 游戏规则如下：每一回合，玩家需要从自己收集到的单词中说出一个单词。所说的单词必须满足以下条件：该单词的字典序大小要比上一个单词大，并且该单词要么与上一个单词以相同的字母开头，要么以字母表中紧随其后的字母开头。 例如，如果上一个单词是 apple，那么接下来的单词可以是： 以相同字母 a 开头的单词，如：apply。以字母表中紧随 a 之后的字母 b 开头的单词，如 banana。 如果某个玩家无法满足上述条件，则该玩家输掉游戏。 小蓝和小桥轮流进行，由小蓝率先开始。 已知小蓝第一次会说出自己单词堆中按字典序排列最小的单词。请问，如果小蓝和小桥都按照最优策略进行游戏，谁会获胜？ 题解 1234567891011121314151617181920212223242526import osimport sysn , m = map(int,input().split())a =[input() for _ in range(n)]b = [input() for _ in range(m)]a.sort(reverse=True) #这是正序，倒序就是reverse：trueb.sort(reverse= True) flag = Truepre = a.pop()while(flag and a) or (not flag and b): if flag: #flag为true的时候，这时候小蓝已经说过一个了， 所以轮到小桥 word = a.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1 ) ) and word &gt; pre : flag = False pre = word else: word = b.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1) ) and word &gt; pre : flag = True pre = wordprint(&#x27;L&#x27;) if flag else print(&#x27;Q&#x27;) 接下来是hexo的内置代码块： 12345678910111213141516171819202122232425import osimport sysn , m = map(int,input().split())a =[input() for _ in range(n)]b = [input() for _ in range(m)]a.sort(reverse=True) #这是正序，倒序就是reverse：trueb.sort(reverse= True) flag = Truepre = a.pop()while(flag and a) or (not flag and b): if flag: #flag为true的时候，这时候小蓝已经说过一个了， 所以轮到小桥 word = a.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1 ) ) and word &gt; pre : flag = False pre = word else: word = b.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1) ) and word &gt; pre : flag = True pre = wordprint(&#x27;L&#x27;) if flag else print(&#x27;Q&#x27;) 学习到了什么？ 字典序 什么是字典序，就是按照字典顺序进行比较排序的结果，比如说两个单词app，apple。从第一个字母开始进行比较，如果一样就继续对比下一个字母，直到不一样。比如到了app以后，apple还有le，而app则没有了，app的字典序就比apple要小。排序就是’app&lt;apple’。 字典序排序 如果有很多个单词进行字典序比较，是不是会比较头疼？但是实际上python和c++中已经内置了字典序排序，可以直接使用sort()或者是reverse()函数直接对多个对象进行字典序排序。sort()是从小到大进行排序，反之从大到小。 列表推导式 代码里用到列表推导式：a = [input() for _ in range(n)]，或者其他的形式a = list(map(int , input().split()))，这样的式子简洁高效，要记住。","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"专业课","slug":"专业课","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"算法","slug":"算法","permalink":"https://wwxnb261.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"},{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"},{"name":"二分","slug":"二分","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%88%86/"}]}