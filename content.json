{"meta":{"title":"Shiyi Wang 博客","subtitle":"wwx的blog","description":"为了记录自己所学习的内容，创建blog","author":"Shiyi Wang","url":"https://wwxnb261.github.io","root":"/"},"pages":[{"title":"关于博客主","date":"2024-08-15T20:15:54.000Z","updated":"2025-03-20T05:32:19.769Z","comments":false,"path":"about/index.html","permalink":"https://wwxnb261.github.io/about/index.html","excerpt":"","text":"我使用什么语言 HTML CSS JAVA C++ Python 我使用什么开发工具 Visual Stdio Code Pycharm Github Git"},{"title":"博客总览","date":"2025-03-29T03:31:32.746Z","updated":"2025-03-26T06:46:45.287Z","comments":false,"path":"overview/index.html","permalink":"https://wwxnb261.github.io/overview/index.html","excerpt":"","text":""},{"title":"","date":"2025-04-25T07:15:02.257Z","updated":"2025-04-25T07:15:02.257Z","comments":false,"path":"posts/index.html","permalink":"https://wwxnb261.github.io/posts/index.html","excerpt":"","text":""},{"title":"考研征途时间线","date":"2025-05-28T03:00:00.000Z","updated":"2025-05-28T04:44:50.293Z","comments":false,"path":"study-log/index.html","permalink":"https://wwxnb261.github.io/study-log/index.html","excerpt":"","text":"这里是我的考研打卡记录时间线，记录下奋斗的每一天！"}],"posts":[{"title":"考研征途 | 2025-05-30 · 继续加油！","slug":"2025-05-30-继续加油-","date":"2025-05-30T12:28:08.000Z","updated":"2025-05-30T15:38:04.836Z","comments":true,"path":"2025/05/30/2025-05-30-继续加油-/","permalink":"https://wwxnb261.github.io/2025/05/30/2025-05-30-%E7%BB%A7%E7%BB%AD%E5%8A%A0%E6%B2%B9-/","excerpt":"","text":"今日心情/状态: 🔥今日箴言: “坚持坚持坚持！努力努力努力!” 今天又是充满挑战与机遇的一天！继续为梦想燃烧 🔥，为 408 奋战！这是我今天的详细记录： 🎯 今日核心目标 (Today’s Focus) [🟡] 必达目标 1: 完成数学一第一章练习[🟡] 必达目标 2: 计算机组成原理四小时看课[🟡] 必达目标 3: 完成Leetcode和英语单词习惯打卡 ⏰ 时间 &amp; 专注度追踪 (Time &amp; Focus Tracking) 时段 (Period) 专注任务 (Task) 番茄钟 (Pomodoros) 效率评估 (Efficiency) 8:30-12:00 数学一练习 🍅🍅🍅 ⭐⭐⭐⭐ (不错) 14:30-19:30 计算机组成原理第二章复习 🍅🍅🍅🍅🍅 ⭐⭐⭐⭐ (不错) 20:00-21:00 Leetcode每日一题 🍅 ⭐⭐ (很一般) 总计 9 🍅 每个番茄钟 ≈ 60 分钟专注。效率评估：1-5 星。 📚 各科学习日志 (Subject Log) 点击展开/折叠详细学习记录 💻 LeetCode 算法 题目: 4. 寻找两个正序数组的中位数 (困难) 学习时长: 1 小时 思路/收获: 二分法的妙用，要把二分法用到极致，深入理解二分 🧮 数学 (李正元复习全书) 复习章节: 第一章 进度: 完成第一章练习百分之五十以上 学习时长: 3 小时 笔记/难点/收获: 收获：我发现之前的解题的时候一直没有去揣摩题目，所谓琢磨出题人的想法和思路。虽然一直这样说，但是实际上一直惯性思维，拿到题目就开始做，这样是不好的，因为没有解析题目，只是单纯的机械的在做题而已。今天反复有几题自己做没有思路，一看到答案就会写了：‘哦，这不是那啥啥啥吗’，实际上问题就是因为自己并没有解析题目，因为不知道这是什么类型的题目，这题在考什么知识点，不知道什么类型，因此总是捉瞎。你他妈光看题目的字能看出个花来吗？要分析题目，这是哪一章的知识点，哪种类型的题目，为什么教辅书总是会分章节分题型编书？这就是原因，今天上课的时候刷题效率不高，但是早上的时候做题理解了这一点，做起题来就比之前明显更有章法，希望再接再厉。 💻 408 计算机组成原理 复习章节: 第二章 进度: 百分之五十 学习时长: 4.5 小时 笔记/难点/收获: 目前没有 ✅ 习惯与健康打卡 (Habit &amp; Health Check-in) [✅] 7:00 起床 - 早起的鸟儿有虫吃！[✅] 30 分钟运动 - 昨天没有锻炼，因为昨天要吃榴莲和KFC疯狂星期四，就没有去锻炼。今天图书馆早放，提前闭馆。今天把昨天和今天的锻炼一起完成了。[✅] 1:30 睡觉 - 早睡早起精神好！[❌] 1.5L 饮水 - 记得多喝水！[❌] 身体健康 - 注意身体！[✅] 远离手机干扰 - 专注力Max！ 💡 灵感 / 疑难 / 解决 (Aha! / Puzzles / Solutions) Aha! Moment: 💡 关于数学题解题的想法和灵感 Stuck Point: 🤔 今日学习较为顺利 Solution Plan: 📝 继续努力！ 📊 今日学习时长分布 (Mermaid 图) pie title 今日学习时长分布 \"LeetCode\" : 1 \"数学\" : 3 \"计组\" : 4.5 (根据实际情况调整各项时长，若记录为0则不显示) ✍️ 每日复盘与明日计划 (Review &amp; Plan) 今日总结: 今天总的来说状态还可以，算是回归正轨。计划按部就班正常进行，希望再接再厉。但是课上还是有点松散没有抓紧时间。 明日计划: 明天完成四小时的计组，大概可以搞定第二章。然后完成第一章数一的练习，复习第二章。 加油，未来的研究生！你走的每一步都算数！ ✨","categories":[{"name":"考研日记","slug":"考研日记","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"每日打卡","slug":"每日打卡","permalink":"https://wwxnb261.github.io/tags/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"}]},{"title":"计算机组成原理标志寄存器总结","slug":"kaoyan/408/计算机组成原理标志寄存器总结","date":"2025-05-30T10:30:15.000Z","updated":"2025-05-30T10:34:15.544Z","comments":true,"path":"2025/05/30/kaoyan/408/计算机组成原理标志寄存器总结/","permalink":"https://wwxnb261.github.io/2025/05/30/kaoyan/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8%E6%80%BB%E7%BB%93/","excerpt":"计算机组成原理中加减法运算器的标志位结果标志寄存器的总结","text":"计算机组成原理：标志寄存器中的标志位详解 💻 在计算机的中央处理器（CPU）中，标志寄存器 (Flags Register)，也常被称为程序状态字 (Program Status Word - PSW)，扮演着至关重要的角色。它是一组特殊的触发器，用于记录当前指令执行后产生的状态信息或运算结果的某些特征。这些标志位可以被后续的条件转移指令、算术逻辑指令等用来控制程序的执行流程。 下面我们来详细整理几个最常见和重要的标志位及其含义与运算原理。 1. 零标志位 (Zero Flag - ZF) 🅾️ 含义: 如果最近一次算术或逻辑运算的结果为 0，则零标志位 ZF 被置为 1 (表示“结果是零”)；否则，ZF 被置为 0 (表示“结果不是零”)。 运算原理: CPU 在执行算术（如加法、减法）或逻辑运算（如与、或、异或）后，会检查运算结果的所有位。如果结果的所有位都是0，则 ZF = 1。 例如：MOV AX, 5；SUB AX, 5 执行后，AX 的值为 0，所以 ZF = 1。 例如：MOV BX, 5；AND BX, 0 执行后，BX 的值为 0，所以 ZF = 1。 例如：MOV CX, 5；SUB CX, 3 执行后，CX 的值为 2 (非零)，所以 ZF = 0。 2. 符号标志位 (Sign Flag - SF) ➕➖ 含义: 如果最近一次算术运算结果的最高位 (Most Significant Bit - MSB) 为 1，则符号标志位 SF 被置为 1 (表示结果为负数，在有符号数表示中)；如果最高位为 0，则 SF 被置为 0 (表示结果为正数或零)。 运算原理: 此标志位直接反映了运算结果的最高位。对于有符号整数（通常用补码表示），最高位为1代表负数，为0代表正数或零。 例如：在一个8位系统中，MOV AL, 01000000B (64)；ADD AL, 01000000B (64)。结果为 10000000B (-128，补码表示)。最高位是1，所以 SF = 1。 例如：MOV AL, 5；SUB AL, 10。结果为 -5。如果用8位补码表示，-5 是 11111011B。最高位是1，所以 SF = 1。 例如：MOV AL, 10；SUB AL, 5。结果为 5 (00000101B)。最高位是0，所以 SF = 0。 3. 进位标志位 (Carry Flag - CF) ➡️ 含义: 在无符号数加法运算中，如果最高位产生了向更高位的进位，则 CF 被置为 1；否则为 0。 在无符号数减法运算中，如果最高位需要向更高位借位，则 CF 被置为 1；否则为 0。 移位指令也会影响 CF，例如左移时，移出的最高位会进入 CF；右移时，移出的最低位会进入 CF。 运算原理: 加法: 考虑两个n位无符号数相加。如果结果超出了n位所能表示的范围 (即产生了第 n+1 位的进位)，CF = 1。 例如：(8位) MOV AL, 0xFF (255)；ADD AL, 0x01 (1)。结果 0x100。AL 中存 0x00，CF = 1。 减法: A - B 通常通过 A + (-B的补码) 来实现。如果 A &lt; B (无符号比较)，则会发生借位，CF = 1。 例如：(8位) MOV AL, 0x05；SUB AL, 0x0A。5 - 10，需要借位，所以 CF = 1。AL 中的结果是 0xFB (即-5的补码)。 注意与溢出标志 (OF) 的区别: CF 主要用于无符号数运算，而 OF 用于有符号数运算。 4. 溢出标志位 (Overflow Flag - OF) ⚠️ 含义: 在有符号数算术运算中，如果运算结果超出了机器所能表示的范围 (即发生了溢出)，则溢出标志位 OF 被置为 1；否则为 0。 运算原理: 溢出通常发生在以下情况 (对于补码运算)： 正数 + 正数 = 负数 (上溢) 负数 + 负数 = 正数 (下溢) 一个简单的判断方法是：如果最高位的进位 (C_msb) 和 次高位的进位 (C_msb-1) 不同，则 OF = 1 (OF = C_msb XOR C_msb-1)。或者说，如果操作数的符号相同，而结果的符号与操作数相反，则发生溢出。 例如：(8位有符号数，范围 -128 到 +127) MOV AL, 100 (01100100B)；ADD AL, 50 (00110010B)。结果是 10010110B (-106)。两个正数相加得到一个负数，发生溢出，OF = 1。 MOV AL, -100 (10011100B)；ADD AL, -50 (11001110B)。结果是 (1)01101010B (+106，忽略进位到CF的位)。两个负数相加得到一个正数，发生溢出，OF = 1。 MOV AL, 50；ADD AL, 50。结果 100 (01100100B)。符号未变，OF = 0。 5. 辅助进位标志位 (Auxiliary Carry Flag - AF 或 AC) 🔢 含义: 在算术运算中，如果结果的低4位 (nibble) 向高4位产生了进位或借位，则辅助进位标志位 AF 被置为 1；否则为 0。 运算原理: 主要用于 BCD (Binary Coded Decimal) 码的调整。当两个BCD码相加或相减时，如果低4位的结果大于9或发生进位/借位，就需要进行调整。AF标志就是用来指示是否需要这种调整。 例如：MOV AL, 0x09；ADD AL, 0x08。 二进制：0000 1001 + 0000 1000 = 0001 0001 (0x11)。 低4位 1001 + 1000 = (1)0001，产生了向高4位的进位 (第3位到第4位)，所以 AF = 1。 例如：MOV AL, 0x25；SUB AL, 0x07。 0010 0101 - 0000 0111 低4位 0101 - 0111 需要从高4位借位，所以 AF = 1。 6. 奇偶标志位 (Parity Flag - PF) ⚖️ 含义: 如果最近一次运算结果的低8位中包含偶数个 ‘1’，则奇偶标志位 PF 被置为 1 (表示偶校验)；如果包含奇数个 ‘1’，则 PF 被置为 0 (表示奇校验)。 运算原理: CPU 计算结果中低8位（对于16位或32位运算，通常也只关注最低字节）中 ‘1’ 的个数。 例如：MOV AL, 0x03 (二进制 00000011B)。结果的低8位中有两个 ‘1’ (偶数个)，所以 PF = 1。 例如：MOV AL, 0x07 (二进制 00000111B)。结果的低8位中有三个 ‘1’ (奇数个)，所以 PF = 0。 注意：有些架构可能对整个结果的位数进行奇偶校验，但Intel x86架构主要关注最低字节。 总结 标志位 全称 英文缩写 置1条件 (通常情况) 主要用途 零标志 Zero Flag ZF 运算结果为0 判断结果是否为零 符号标志 Sign Flag SF 运算结果最高位为1 (负数) 判断结果正负 (有符号数) 进位标志 Carry Flag CF 无符号数加法最高位进位，或减法最高位借位 无符号数溢出、多字节运算 溢出标志 Overflow Flag OF 有符号数运算结果超出表示范围 (溢出) 有符号数溢出判断 辅助进位(非重点) Auxiliary Carry Flag AF / AC 运算结果低4位向高4位有进位/借位 BCD码运算调整 奇偶标志(非重点) Parity Flag PF 运算结果低8位中’1’的个数为偶数 数据校验 (较少直接用于程序逻辑) 理解这些标志位对于学习汇编语言、调试程序以及深入理解CPU的工作原理都非常有帮助。它们是CPU决策和控制程序流程的基础。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"https://wwxnb261.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"}]},{"title":"考研征途 | 2025-05-29 · 继续坚持，持之以恒","slug":"2025-05-29-继续坚持-持之以恒","date":"2025-05-29T14:05:17.000Z","updated":"2025-05-30T00:10:36.382Z","comments":true,"path":"2025/05/29/2025-05-29-继续坚持-持之以恒/","permalink":"https://wwxnb261.github.io/2025/05/29/2025-05-29-%E7%BB%A7%E7%BB%AD%E5%9D%9A%E6%8C%81-%E6%8C%81%E4%B9%8B%E4%BB%A5%E6%81%92/","excerpt":"","text":"今日心情/状态: 🤔今日箴言: “不要因为一时的心动就放纵自己” 今天又是充满挑战与机遇的一天！继续为梦想燃烧 🔥，为 408 奋战！这是我今天的详细记录： 🎯 今日核心目标 (Today’s Focus) [🟡] 必达目标 1: 数学一复习完成：第一章节练习完成一半，希望能在下周四之前完成到第四章的任务。[❌] 必达目标 2: 计算机组成原理：下周四全部计组复习完毕（刷题可以稍微缓解一下），今天只完成了2.1[❌] 必达目标 3: 数据结构刷题（刷完图领408） ⏰ 时间 &amp; 专注度追踪 (Time &amp; Focus Tracking) 时段 (Period) 专注任务 (Task) 番茄钟 (Pomodoros) 效率评估 (Efficiency) 上午 无 无 ⭐(拉跨) 下午12：50-16：50 数学一第一章练习 🍅🍅🍅🍅 ⭐⭐⭐⭐⭐ (高效) 晚上20：30-21：00 计组第二章2.1 🍅 ⭐⭐ (很一般，因为只有半个多小时) 晚上21：00-22：00 Leetcode刷题 🍅 ⭐⭐⭐ (一般，需复盘) 总计 6 🍅 每个番茄钟 = 60 分钟专注。效率评估：1-5 星。请手动填写。 📚 各科学习日志 (Subject Log) 点击展开/折叠详细学习记录 🇬🇧 英语 (English) 进度: 单词背诵 (100词)。 笔记/难点: 没有 💻 LeetCode 算法 题目: LCR 182.动态口令 (简单) 思路/收获: 学会了C++中的字符串string 🧮 数学 (李正元复习全书) 复习章节: 完成了数一第一章的练习大半部分 进度: 一半以上 笔记/难点/收获: 主要还是无穷小的替换部分公式，有时候会忘记，希望能够记齐 💻 408 计算机组成原理 复习章节: 复习第二章节，进度有点缓慢 进度: 第二章节2.1完成 笔记/难点/收获: 还是多背，多看。目前进制转换和机器数部分感觉没有什么难点/ ✅ 习惯与健康打卡 (Habit &amp; Health Check-in) [❌] 12:00 起床 - 下次争取早点！[✅] 30 分钟运动 - 打球了，但是只有二十分钟左右，感觉有点累其实，这估计是今天没起来的原因之一，因为本来其实早上起来了的，不知道为什么就又睡过去了。不能剧烈运动，不然第二天肯定起不来，希望慢慢改进吧。[❌] 2:00 睡觉 - 狗屎作息。[✅] 1.5L 饮水 - 继续加油[❌] 健康饮食 - 疯狂星期四[✅] 远离手机干扰 昨天还算么有被干扰手机[❌] 每日感恩 - 并没有感恩 💡 灵感 / 疑难 / 解决 (Aha! / Puzzles / Solutions) Aha! Moment: 💡 今日暂无特别灵感 Stuck Point: 🤔 今日学习较为顺利 Solution Plan: 📝 继续努力！ 📊 今日学习时长分布 (Mermaid 图表示例) pie title 今日学习时长分布 (请手动调整) \"数学\" : 4 \"英语\" : 0.5 \"LeetCode\" : 1 \"数据结构\" : 0 \"计组\" : 0.5 \"其他\" : 1 ✍️ 每日复盘与明日计划 (Review &amp; Plan) 今日总结: 状态良好，但是时间浪费很多 明日计划: 明天完成计组四小时复习时间，数学一完成第一章和第二章的三分之一吧大概 加油，未来的研究生！你走的每一步都算数！ ✨","categories":[{"name":"考研日记","slug":"考研日记","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"每日打卡","slug":"每日打卡","permalink":"https://wwxnb261.github.io/tags/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"}]},{"title":"数学无穷小的替换整理","slug":"kaoyan/shuxue/数学无穷小的替换整理","date":"2025-05-29T08:00:53.000Z","updated":"2025-05-29T08:08:55.215Z","comments":true,"path":"2025/05/29/kaoyan/shuxue/数学无穷小的替换整理/","permalink":"https://wwxnb261.github.io/2025/05/29/kaoyan/shuxue/%E6%95%B0%E5%AD%A6%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%9B%BF%E6%8D%A2%E6%95%B4%E7%90%86/","excerpt":"极限求解利器：常用等价无穷小替换大法","text":"在求解极限，尤其是 0/0 型极限时，你是否常常被复杂的分子分母搞得头昏脑胀？别担心！掌握了等价无穷小替换这个强大的工具，许多极限问题将迎刃而解。这篇笔记将带你系统梳理常用的等价无穷小，并重点强调使用的“游戏规则”，助你避开陷阱，轻松求解极限！ 什么是等价无穷小？ 当自变量 $x$ 趋于某个值（通常是 $0$ 或 $\\infty$）时，如果两个无穷小量 $\\alpha(x)$ 和 $\\beta(x)$ 的比值极限为 $1$，我们就称 $\\alpha(x)$ 与 $\\beta(x)$ 是等价无穷小，记作： $$ \\alpha(x) \\sim \\beta(x) \\quad (\\text{当 } x \\to x_0) $$ 也就是说： $$ \\lim_{x \\to x_0} \\frac{\\alpha(x)}{\\beta(x)} = 1 $$ 简单来说，等价无穷小意味着在极限过程中，这两个无穷小量可以“互相替代”，因为它们趋向于零的“速度”是基本一样的。这为我们简化极限计算提供了极大的便利。 常用等价无穷小 ($x \\to 0$) 以下是在 $x \\to 0$ 时最常用的一些等价无穷小替换，务必牢记于心！ 三角函数相关: $ \\sin x \\sim x $ $ \\tan x \\sim x $ $ \\arcsin x \\sim x $ $ \\arctan x \\sim x $ $ 1 - \\cos x \\sim \\frac{1}{2}x^2 $ $ \\sec x - 1 \\sim \\frac{1}{2}x^2 $ $ \\tan x - \\sin x \\sim \\frac{1}{2}x^3 $ $ \\arcsin x - x \\sim \\frac{1}{6}x^3 $ $ x - \\sin x \\sim \\frac{1}{6}x^3 $ $ \\arctan x - x \\sim -\\frac{1}{3}x^3 $ $ x - \\tan x \\sim -\\frac{1}{3}x^3 $ 指数/对数函数相关: $ e^x - 1 \\sim x $ $ a^x - 1 \\sim x \\ln a \\quad (a &gt; 0, a \\neq 1) $ $ \\ln(1 + x) \\sim x $ $ \\log_a(1 + x) \\sim \\frac{x}{\\ln a} \\quad (a &gt; 0, a \\neq 1) $ 幂函数/根式相关: $ (1 + x)^\\alpha - 1 \\sim \\alpha x $ $ \\sqrt[n]{1 + x} - 1 \\sim \\frac{1}{n}x $ 重要提示: 上述公式不仅对 $x$ 成立，对于任何趋向于 $0$ 的无穷小量 $u(x)$ 也成立。例如，当 $x \\to 0$ 时，$ \\sin(3x^2) \\sim 3x^2 $。 使用等价无穷小的“黄金法则” 虽然等价无穷小很强大，但它不是万能的，必须遵循一定的规则，否则很容易出错。核心原则是： 只能在乘除运算中进行整体替换，不能在加减运算中随意替换！ 可以做: 如果极限是 $ \\lim \\frac{\\alpha_1 \\cdot \\alpha_2}{\\beta_1 \\cdot \\beta_2} $ 的形式，并且 $ \\alpha_1 \\sim \\alpha’_1, \\alpha_2 \\sim \\alpha’_2, \\beta_1 \\sim \\beta’_1, \\beta_2 \\sim \\beta’_2 $，那么你可以直接替换： $$ \\lim \\frac{\\alpha_1 \\cdot \\alpha_2}{\\beta_1 \\cdot \\beta_2} = \\lim \\frac{\\alpha’_1 \\cdot \\alpha’_2}{\\beta’_1 \\cdot \\beta’_2} $$ 要小心: 如果极限包含加减运算，比如 $ \\lim (\\alpha - \\beta) $ 或 $ \\lim \\frac{\\alpha - \\beta}{\\gamma} $，通常不能直接将 $ \\alpha $ 和 $ \\beta $ 替换为它们的等价无穷小。 警惕！何时不能“偷懒”？ 加减运算是使用等价无穷小最容易出错的地方。为什么呢？因为等价无穷小只是“一阶”近似，它忽略了更高阶的无穷小项。如果在加减法中，这些一阶项恰好被抵消了，那么决定极限结果的将是那些被忽略的高阶项。此时，简单的替换就会导致错误。 经典陷阱案例: 求 $ \\lim_{x \\to 0} \\frac{\\tan x - \\sin x}{x^3} $。 错误做法: 因为 $ \\tan x \\sim x $ 且 $ \\sin x \\sim x $，所以 $ \\lim \\frac{x - x}{x^3} = \\lim \\frac{0}{x^3} $？这显然是错误的。 正确做法 1 (通分): $$ \\lim_{x \\to 0} \\frac{\\frac{\\sin x}{\\cos x} - \\sin x}{x^3} = \\lim_{x \\to 0} \\frac{\\sin x (1 - \\cos x)}{x^3 \\cos x} $$ 现在，我们可以进行替换了，因为是乘除形式： $$ \\lim_{x \\to 0} \\frac{x \\cdot (\\frac{1}{2}x^2)}{x^3 \\cdot 1} = \\lim_{x \\to 0} \\frac{\\frac{1}{2}x^3}{x^3} = \\frac{1}{2} $$ 正确做法 2 (使用更高阶的等价无穷小): 我们知道 $ \\tan x - \\sin x \\sim \\frac{1}{2}x^3 $，所以： $$ \\lim_{x \\to 0} \\frac{\\tan x - \\sin x}{x^3} = \\lim_{x \\to 0} \\frac{\\frac{1}{2}x^3}{x^3} = \\frac{1}{2} $$ (当然，这需要你记住更多公式，或者使用泰勒展开。) 核心要点: 在进行加减运算时，要么通过代数变形（如通分、有理化）将其转化为乘除形式再替换，要么使用泰勒展开获取更高阶的近似，确保相减后留下的“主要部分”没有被错误地忽略。 实战演练 求 $ \\lim_{x \\to 0} \\frac{\\sin(3x)}{e^{2x} - 1} $: $$ \\lim_{x \\to 0} \\frac{\\sin(3x)}{e^{2x} - 1} = \\lim_{x \\to 0} \\frac{3x}{2x} = \\frac{3}{2} $$ 求 $ \\lim_{x \\to 0} \\frac{\\arctan x \\cdot (1 - \\cos x)}{x \\ln(1 + x^2)} $: $$ \\lim_{x \\to 0} \\frac{\\arctan x \\cdot (1 - \\cos x)}{x \\ln(1 + x^2)} = \\lim_{x \\to 0} \\frac{x \\cdot (\\frac{1}{2}x^2)}{x \\cdot x^2} = \\lim_{x \\to 0} \\frac{\\frac{1}{2}x^3}{x^3} = \\frac{1}{2} $$ 背后的原理：泰勒展开 其实，等价无穷小替换的理论基础是泰勒展开（Maclaurin 公式）。当 $x \\to 0$ 时，任何足够光滑的函数 $f(x)$ 都可以展开为： $$ f(x) = f(0) + f’(0)x + \\frac{f’‘(0)}{2!}x^2 + \\frac{f’‘’(0)}{3!}x^3 + \\dots $$ 对于我们上面列出的等价无穷小，$f(0)$ 通常是 $0$ 或 $1$。等价无穷小替换本质上就是用泰勒展开的第一个非零项（最低阶项）来替代原函数。 例如： $ \\sin x = x - \\frac{x^3}{3!} + \\dots $，所以 $ \\sin x \\sim x $。 $ \\cos x = 1 - \\frac{x^2}{2!} + \\dots $，所以 $ 1 - \\cos x \\sim \\frac{x^2}{2} $。 理解了这一点，你就更能明白为什么加减法需要小心翼翼了——因为你可能需要考虑更高阶的项！ 总结 等价无穷小替换是求解极限，特别是 0/0 型极限的强大武器。它能显著简化计算过程。但请务必牢记： 熟记常用公式是基础。 只在乘除运算中放心替换。 加减运算要格外小心，优先考虑代数变形或泰勒展开。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"等价无穷小","slug":"等价无穷小","permalink":"https://wwxnb261.github.io/tags/%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F/"},{"name":"极限","slug":"极限","permalink":"https://wwxnb261.github.io/tags/%E6%9E%81%E9%99%90/"}]},{"title":"考研征途 | 2025-05-28 · 吸取教训，突破自我","slug":"2025-05-28-吸取教训-突破自我","date":"2025-05-28T13:32:31.000Z","updated":"2025-05-28T13:48:55.161Z","comments":true,"path":"2025/05/28/2025-05-28-吸取教训-突破自我/","permalink":"https://wwxnb261.github.io/2025/05/28/2025-05-28-%E5%90%B8%E5%8F%96%E6%95%99%E8%AE%AD-%E7%AA%81%E7%A0%B4%E8%87%AA%E6%88%91/","excerpt":"","text":"今日心情/状态: 😭今日箴言: “请好好审视自己的行为，不要辜负自己的时间” 今天又是充满挑战与机遇的一天！继续为梦想燃烧 🔥，为 408 奋战！这是我今天的详细记录： 🎯 今日核心目标 (Today’s Focus) [❌] 必达目标 1: 刷题未能完成、明天补足[❌] 必达目标 2: 数学一复习[❌] 必达目标 3: 计组复习 ⏰ 时间 &amp; 专注度追踪 (Time &amp; Focus Tracking) 时段 (Period) 专注任务 (Task) 番茄钟 (Pomodoros) 效率评估 (Efficiency) 上午 下午 晚上 总计 XX 🍅 每个番茄钟 = 25 分钟专注 + 5 分钟休息。效率评估：1-5 星。请手动填写。 📚 各科学习日志 (Subject Log) 点击展开/折叠详细学习记录 🇬🇧 英语 (English) 进度: 单词背诵 (100词)。 笔记/难点: 无 💻 LeetCode 算法 题目: 19.删除链表的倒数N个节点 (中等) 思路/收获: 一般情况下，删除结点使用delete来进行，这取决于是否选择释放对应的空间 ✅ 习惯与健康打卡 (Habit &amp; Health Check-in) [❌] 8:30 起床 - 下次争取早点！[✅] 30 分钟运动 - 才第二天有点小累，希望再接再厉[❌] am 3:00 睡觉 - 保证睡眠哦！[ ] 1.5L 饮水 - (请自行打卡)[ ] 健康饮食 - (请自行打卡)[ ] 远离手机干扰 - (请自行打卡)[ ] 每日感恩 - (请自行打卡) 💡 灵感 / 疑难 / 解决 (Aha! / Puzzles / Solutions) Aha! Moment: 💡 今日无灵感疑难解决 Stuck Point: 🤔 无 Solution Plan: 📝 无 📊 今日学习时长分布 (Mermaid 图表示例) pie title 今日学习时长分布 (请手动调整) \"数学\" : 2 \"英语\" : 1 \"LeetCode\" : 1 \"数据结构\" : 1.5 \"计组\" : 1.5 \"其他\" : 1 (请根据实际情况调整各项时长) ✍️ 每日复盘与明日计划 (Review &amp; Plan) 今日总结: 今天的状态十分差劲，不知道自己在干什么 希望明天能有好的结局 明日计划: 明天完成计组第二章三分之二，外加数据结构刷题本刷题，数学一的第一章题目做完（很简单的极限内容，一定要做完） 加油，未来的研究生！你走的每一步都算数！ ✨","categories":[{"name":"考研日记","slug":"考研日记","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"每日打卡","slug":"每日打卡","permalink":"https://wwxnb261.github.io/tags/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"}]},{"title":"剩余规划","slug":"kaoyan/guihua/剩余规划","date":"2025-04-25T07:10:10.000Z","updated":"2025-05-30T10:38:17.493Z","comments":true,"path":"2025/04/25/kaoyan/guihua/剩余规划/","permalink":"https://wwxnb261.github.io/2025/04/25/kaoyan/guihua/%E5%89%A9%E4%BD%99%E8%A7%84%E5%88%92/","excerpt":"剩余规划","text":"距离6月底大约还有9周半的时间（约66天）。这是一个强度比较大的计划，需要你付出极大的努力和专注。 以下是为你量身定做的学习计划建议，分为数学和408专业课两大块，并按周分解： 核心原则： 并行推进： 数学和408必须同时进行，不能学完一门再学另一门。 时间分配（估算）： 建议每天有效学习时间不少于8小时（根据个人情况调整）。大致可以将时间对半分给数学和408，或者根据当天具体任务调整，例如上午数学，下午专业课，晚上查漏补缺或做题。 练习结合： 理论学习和习题练习紧密结合，学完一章/节立刻做对应的基础题巩固。 效率优先： 第一轮复习重在理解基础概念、掌握基本方法，对于难题、偏题可以暂时标记，不必过分纠结。 及时调整： 每周末根据本周完成情况，微调下周计划。 详细计划（按周划分）： 第一阶段：补齐短板，全面启动 (第1-3周：约4月25日 - 5月15日) 本阶段目标： 完成高数剩余内容及全部基础习题，完成线代第一轮学习和基础习题，继续推进计组，完成数据结构习题。 数学 (每天约4小时)： 第1周： 完成高数剩余理论：级数、三重积分及应用等。（约2-3天） 完成高数基础习题册：从第6章继续，力争本周完成所有高数基础习题。（每天坚持做） 第2-3周： 主攻线性代数： 快速过完线代的基础理论（教材/辅导讲义），同步完成对应的基础习题（如李永乐660题或类似基础题集）。线代章节不多，但概念抽象，要注重理解。争取2周内结束线代第一轮。 408专业课 (每天约4小时)： 第1周： 完成数据结构王道书后习题。（利用计组学习间隙或专门时间，尽快扫尾） 主攻计算机组成原理： 从第二章继续，按章节学习，学完一章做一章的王道选择题。目标：本周学完2-3章。 第2-3周： 持续推进计算机组成原理： 保持每天学习进度，同步做题。目标：第3周末，计组理论学习过半或接近完成，习题跟上进度。 第二阶段：攻坚克难，稳步推进 (第4-7周：约5月16日 - 6月12日) 本阶段目标： 完成概率论第一轮学习和基础习题，完成计组学习和习题，启动并完成操作系统第一轮学习和基础习题。 数学 (每天约4小时)： 第4-5周 (或第6周初)： 主攻概率论与数理统计： 同线代，快速过基础理论，同步做基础习题。概率论随机变量及其分布、数字特征是重点。争取2.5-3周内结束。 408专业课 (每天约4小时)： 第4周： 完成计算机组成原理所有章节的理论学习，并完成王道书后对应的选择题。 第5-7周： 主攻操作系统： 这是408的重点和难点之一。按章节学习（进程管理、内存管理、文件管理、I/O管理是核心），理解概念，掌握算法。同步完成王道书后选择题。争取3周内完成第一轮。 第三阶段：全面覆盖，收官冲刺 (第8-9.5周：约6月13日 - 6月30日) 本阶段目标： 完成计算机网络第一轮学习和基础习题，回顾检查数学和408各科，确保所有科目第一轮已过完。 数学 (每天约4小时)： 主要任务： 如果概率论未完成，本阶段初优先完成。 检查高数、线代、概率论的基础习题是否都已做完。 对第一轮复习中标记的重点、难点、易错点进行初步回顾。可以快速翻阅笔记或错题。 408专业课 (每天约4小时)： 第8-9.5周： 主攻计算机网络： 计网内容相对独立，但也庞杂。重点掌握TCP/IP协议栈各层基本原理和协议（物理层、数据链路层、网络层、传输层、应用层）。同步完成王道书后选择题。争取2.5周内完成。 查漏补缺： 利用剩余时间，快速回顾检查数据结构、计组、操作系统的知识点和习题完成情况。 每日时间安排建议 (示例)： 上午 (3.5-4小时): 数学（理论学习 + 习题） 下午 (3.5-4小时): 408专业课（理论学习 + 习题） 晚上 (1-2小时): 整理笔记、回顾当天内容、处理遗留问题、做前一天的错题，或者稍微放松调整。 重要注意事项： 教材与资料： 尽快确定并固定使用的教材、辅导讲义（如张宇、李永乐、汤家凤等）和习题集（如660题、1800题、王道单科书等），不要中途频繁更换。 笔记与总结： 学习过程中要做好笔记，特别是自己理解困难或易错的地方。每学完一个章节或科目，尝试进行简单的框架性总结。 习题质量： 第一轮做基础题是为了巩固知识点，务必理解每道题背后的原理，不要只追求速度和数量。错题要及时订正并反思。 心态调整： 考研是长期战役，这个阶段压力大很正常。保持积极心态，允许自己有状态起伏，但要保证整体进度。感到焦虑时可以短暂休息或与人交流。 作息规律： 保证充足睡眠（7-8小时），规律饮食，适当进行短暂的放松活动（如散步、听音乐），保持身心健康是高效学习的基础。 灵活性： 这个计划是一个框架，具体执行中肯定会遇到与预期不符的情况。比如某章节特别难，可能需要多花半天时间。要学会灵活调整，但保证总体目标不变。 6月底的目标状态： 数学三科（高数、线代、概率）基础理论过完一遍，配套的基础习题册（如660题或类似难度）基本完成。 408四门专业课（数据结构、计组、操作系统、计网）基础理论过完一遍，王道等辅导书的课后选择题基本完成。 对各科的基本概念、框架和常见题型有初步掌握。 积累了一定的笔记和错题。 这个计划强度很大，意味着你接下来的两个多月需要非常专注和自律。请务必根据自己的实际学习效率和习惯进行微调。加油，祝你学习顺利，成功上岸！","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"数学计划","slug":"数学计划","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"}]},{"title":"二叉树的代码掌握","slug":"kaoyan/408/二叉树代码掌握","date":"2025-04-15T02:00:00.000Z","updated":"2025-05-04T03:21:07.325Z","comments":true,"path":"2025/04/15/kaoyan/408/二叉树代码掌握/","permalink":"https://wwxnb261.github.io/2025/04/15/kaoyan/408/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%A3%E7%A0%81%E6%8E%8C%E6%8F%A1/","excerpt":"通过小的练习掌握二叉树","text":"为了帮助通过编码实践掌握考研中二叉树的所有知识点，设计了一个分阶段的学习计划，包含核心知识点梳理和配套的编程练习题。 核心原则： 理解概念为先： 先彻底理解每个知识点的定义、性质和应用场景。 编码实践为重： 通过编写代码将理论转化为实际能力，加深理解并锻炼实现技巧。 循序渐进： 从基础到复杂，逐步深入。 举一反三： 掌握核心操作后，能灵活应用于各种变种问题。 重视效率： 关注算法的时间和空间复杂度，这是考研的重要考点。 推荐编程语言： C/C++ 或 Java（考研主流语言），Python 也可以用于快速学习和验证思路。以下题目描述不限语言，但你需要用你选择的语言实现。 第一阶段：二叉树基础与遍历 知识点梳理： 二叉树定义： 节点、根节点、子节点、父节点、兄弟节点、叶子节点、度（入度/出度）、路径、层、深度、高度。 二叉树性质： 第 i 层最多有 2^(i-1) 个节点 (i≥1)。 深度为 k 的二叉树最多有 2^k - 1 个节点 (k≥1)。 对于任何非空二叉树 T，若 n0 是叶节点数，n2 是度为 2 的节点数，则 n0 = n2 + 1。 特殊二叉树： 满二叉树： 定义、性质（节点数、叶子数）。 完全二叉树： 定义（按层序编号与满二叉树一致）、性质（深度、节点关系）。 二叉树存储结构： 链式存储： 节点结构（data, lchild, rchild），画图表示。 顺序存储： 仅适用于完全二叉树，下标关系（父找子，子找父）。 二叉树遍历（重点与难点）： 前序遍历 (Pre-order): 根 -&gt; 左 -&gt; 右 (递归与非递归/迭代实现)。 中序遍历 (In-order): 左 -&gt; 根 -&gt; 右 (递归与非递归/迭代实现)。 后序遍历 (Post-order): 左 -&gt; 右 -&gt; 根 (递归与非递归/迭代实现)。 层序遍历 (Level-order): 使用队列实现。 编码练习题： 【基础】定义二叉树节点： 设计并实现一个二叉树节点结构（或类）。1234567// 示例 (C++)struct TreeNode &#123; int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;&#125;; 【遍历-递归】实现递归遍历： 编写函数，分别实现二叉树的前序、中序、后序递归遍历。 输入： 二叉树的根节点。 输出： 按相应顺序打印节点值（或返回节点值列表）。 【遍历-迭代】实现迭代遍历： 编写函数，分别实现二叉树的前序、中序、后序迭代遍历（通常使用栈）。 输入： 二叉树的根节点。 输出： 按相应顺序打印节点值（或返回节点值列表）。 【遍历-层序】实现层序遍历： 编写函数，实现二叉树的层序遍历（使用队列）。 输入： 二叉树的根节点。 输出： 按层序打印节点值（或返回节点值列表，甚至按层分组的列表）。 【基础操作】计算二叉树属性： 编写函数计算二叉树的高度（或深度）。 编写函数计算二叉树的节点总数。 编写函数计算二叉树的叶子节点数。 编写函数计算二叉树度为 1 的节点数。 编写函数计算二叉树度为 2 的节点数。 编写函数计算二叉树第 k 层的节点数。 【构造】根据遍历序列构造二叉树： 给定前序遍历和中序遍历序列，构造二叉树。 给定后序遍历和中序遍历序列，构造二叉树。 思考： 为什么不能仅根据前序和后序遍历序列构造唯一的二叉树？ 第二阶段：特殊二叉树与应用 知识点梳理： 二叉搜索树 (BST, Binary Search Tree / Binary Sort Tree)： 定义： 左子树所有节点 &lt; 根节点 &lt; 右子树所有节点，递归定义。 操作： 查找、插入、删除（删除是难点，考虑三种情况）。 性质： 中序遍历结果是一个递增序列。 应用： 查找、排序。 局限： 可能退化成链表，导致效率降低。 平衡二叉树 (Balanced Binary Tree)： 动机： 解决 BST 可能退化的问题。 AVL 树： 定义：任何节点的左右子树高度差不超过 1。 平衡因子 (Balance Factor)。 失衡调整：四种旋转（LL, RR, LR, RL）的原理和实现（插入操作后的调整是重点）。 红黑树 (Red-Black Tree)：（考研重点在于理解概念、性质，不一定要求手写复杂实现） 定义：满足 5 条性质的自平衡二叉搜索树。 性质（了解即可）：节点红或黑、根黑、叶节点（NIL）黑、红节点子节点必黑、根到叶节点黑节点数相同。 优势：相比 AVL，插入删除操作的平均旋转次数较少。 堆 (Heap)： 定义： 完全二叉树，满足父节点值 ≥ (或 ≤) 子节点值（最大堆/最小堆）。 存储： 通常用数组（顺序存储）实现。 操作： 插入（上浮/sift-up）、删除堆顶（下沉/sift-down/heapify）、建堆（Build Heap）。 应用： 堆排序、优先队列。 哈夫曼树 (Huffman Tree / Optimal Binary Tree)： 背景： 数据压缩。 定义： 带权路径长度 (WPL) 最小的二叉树。 构造： 贪心算法（选择权值最小的两个节点合并，重复此过程）。 哈夫曼编码： 前缀编码，无歧义。 线索二叉树 (Threaded Binary Tree)： 动机： 利用空指针域存储前驱/后继信息，方便非递归遍历。 线索化： 前序、中序、后序线索化（中序最常用）。 节点结构： 增加标志位区分指针是指向孩子还是线索。 遍历： 利用线索进行遍历。 编码练习题： 【BST】实现 BST 操作： 编写函数在一个 BST 中查找指定值的节点。 编写函数向一个 BST 中插入一个新值。 编写函数从一个 BST 中删除一个指定值的节点（需要仔细处理被删节点有 0, 1, 2 个孩子的情况）。 编写函数判断一棵给定的二叉树是否为 BST。 【BST应用】查找第 K 小/大元素： 在 BST 中快速找到第 K 小（或第 K 大）的元素。 (提示：利用中序遍历) 【平衡树-概念】理解 AVL 旋转： 手动模拟在 AVL 树中插入元素导致失衡后的四种旋转调整过程（画图）。 【平衡树-实现】AVL 树插入： （选做，难度较高）实现 AVL 树的插入操作，包括插入节点和必要的旋转调整。 【堆】实现堆操作： 给定一个数组，实现原地建堆（最大堆或最小堆）。 实现向堆中插入元素的操作。 实现删除堆顶元素的操作。 【堆应用】堆排序： 利用堆实现排序算法。 【堆应用】Top K 问题： 从大量数据中找出最大（或最小）的 K 个元素（使用最小堆或最大堆）。 【哈夫曼树】构造哈夫曼树： 给定一组权值（例如字符频率），构造对应的哈夫曼树。 计算构造出的哈夫曼树的带权路径长度 (WPL)。 （选做）生成每个字符的哈夫曼编码。 【线索二叉树】中序线索化： 编写函数将一个普通二叉树进行中序线索化。 编写函数在中序线索二叉树中查找指定节点的中序后继。 第三阶段：综合应用与难题 知识点梳理： 二叉树的序列化与反序列化： 如何将二叉树转换为字符串（或其他序列）以便存储或传输，以及如何从序列恢复原来的二叉树结构。通常基于前序或层序遍历。 最近公共祖先 (LCA, Lowest Common Ancestor)： 在普通二叉树中查找两个节点的 LCA。 在 BST 中查找两个节点的 LCA（利用 BST 性质可以简化）。 二叉树的直径： 树中任意两个节点之间最长路径的长度。 判断对称二叉树/镜像二叉树。 子结构判断： 判断树 B 是否是树 A 的子结构。 路径问题： 查找从根节点到叶子节点的所有路径，查找路径和等于给定值的路径等。 编码练习题： 【序列化】序列化与反序列化： 实现二叉树的序列化和反序列化（例如，按前序遍历序列化，包含空节点标记）。 【LCA】最近公共祖先： 编写函数查找普通二叉树中两个给定节点的最近公共祖先。 编写函数查找 BST 中两个给定节点的最近公共祖先。 【树属性】计算二叉树的直径： 编写函数计算二叉树的直径。 【树判断】对称二叉树： 编写函数判断一棵二叉树是否是对称的（镜像对称）。 【树判断】子结构： 编写函数判断树 B 是否是树 A 的子结构。 【路径】路径总和： 编写函数找出所有从根节点到叶子节点的路径。 编写函数判断是否存在从根节点到叶子节点的路径，使得路径上节点值之和等于一个给定目标值。 （进阶）找出所有从根节点到叶子节点的路径中，节点值之和等于目标值的路径。 学习建议： 画图！画图！画图！ 理解二叉树操作最有效的方法是画图模拟过程，尤其是递归、删除、旋转等操作。 先递归，后迭代： 递归通常更符合树形结构的定义，更容易理解。掌握递归后，再挑战迭代实现，这对理解栈和队列的应用非常有帮助。 测试用例： 对你编写的每个函数，都要设计充分的测试用例，包括： 空树 只有根节点的树 左右子树都有的普通树 退化成链表的树（左斜/右斜） 完全二叉树 包含重复值的树（如果允许） 针对特定操作的边界情况（如删除叶子节点、只有左/右孩子的节点、根节点等）。 理解复杂度： 分析你写的每个算法的时间复杂度和空间复杂度。考研选择题和算法设计题都会考察。 参考资料： 结合经典的考研数据结构教材（如王道、天勤等）和在线资源（如 LeetCode、牛客网上的二叉树题目）进行学习和练习。 反复练习： 二叉树的很多操作和技巧需要反复练习才能熟练掌握，尤其是各种遍历的非递归实现、BST 删除、AVL 旋转等。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"数据结构","slug":"数据结构","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"二叉树","slug":"二叉树","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"}]},{"title":"中序线索化","slug":"kaoyan/408/中序线索化","date":"2025-04-10T11:51:35.000Z","updated":"2025-04-10T11:51:36.007Z","comments":true,"path":"2025/04/10/kaoyan/408/中序线索化/","permalink":"https://wwxnb261.github.io/2025/04/10/kaoyan/408/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E5%8C%96/","excerpt":"中序线索化","text":"","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"专业课","slug":"专业课","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}]},{"title":"不定积分所有求解方法总结","slug":"kaoyan/shuxue/不定积分所有求解方法总结","date":"2025-04-10T07:15:56.000Z","updated":"2025-04-10T07:16:14.521Z","comments":true,"path":"2025/04/10/kaoyan/shuxue/不定积分所有求解方法总结/","permalink":"https://wwxnb261.github.io/2025/04/10/kaoyan/shuxue/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E6%89%80%E6%9C%89%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"不定积分所有求解方法总结","text":"不定积分的求解方法总结 每种方法均附有典型例题，确保全面覆盖常见技巧： 一、基本积分公式 直接应用基本积分表中的公式，适用于简单函数 例1 $$ \\int x^3 , dx = \\frac{x^4}{4} + C $$ 例2 $$ \\int \\cos x , dx = \\sin x + C $$ 二、线性换元法（凑微分法） 通过调整被积函数的形式，使其匹配基本积分公式 例3 $$ \\int (2x + 1)^5 , dx $$ 解： 令 $u = 2x + 1$，则 $du = 2dx$，即 $dx = \\frac{1}{2}du$ $$ \\int u^5 \\cdot \\frac{1}{2} du = \\frac{1}{12}u^6 + C = \\frac{(2x + 1)^6}{12} + C $$ 三、分部积分法 适用于积分中乘积项的结构，公式为： $$ \\int u , dv = uv - \\int v , du $$ 例4 $$ \\int x e^x , dx $$ 解： 令 $u = x$，$dv = e^x dx$，则 $du = dx$，$v = e^x$ $$ \\int x e^x dx = x e^x - \\int e^x dx = x e^x - e^x + C $$ 四、三角换元法 处理含根式（如 $\\sqrt{a^2 - x^2}$）的积分，常用换元： $x = a \\sin \\theta$（用于 $\\sqrt{a^2 - x^2}$） $x = a \\tan \\theta$（用于 $\\sqrt{a^2 + x^2}$） $x = a \\sec \\theta$（用于 $\\sqrt{x^2 - a^2}$） 例5 $$ \\int \\frac{1}{\\sqrt{1 - x^2}} , dx $$ 解： 令 $x = \\sin \\theta$，则 $dx = \\cos \\theta d\\theta$ $$ \\int \\frac{\\cos \\theta}{\\sqrt{1 - \\sin^2 \\theta}} d\\theta = \\int 1 , d\\theta = \\theta + C = \\arcsin x + C $$ 五、有理函数积分 将有理函数分解为部分分式之和，再逐项积分 例6 $$ \\int \\frac{2x + 3}{(x + 1)(x + 2)} , dx $$ 解： 设 $\\frac{2x + 3}{(x + 1)(x + 2)} = \\frac{A}{x + 1} + \\frac{B}{x + 2}$，解得 $A = 1$，$B = 1$ $$ \\int \\left( \\frac{1}{x + 1} + \\frac{1}{x + 2} \\right) dx = \\ln|x + 1| + \\ln|x + 2| + C $$ 六、倒代换 处理分母次数较高的积分，令 $t = \\frac{1}{x}$ 例7 $$ \\int \\frac{1}{x^2(1 + x^2)} , dx $$ 解： 令 $t = \\frac{1}{x}$，则 $x = \\frac{1}{t}$，$dx = -\\frac{1}{t^2} dt$ $$ \\int \\frac{t^2}{1 + t^2} \\cdot \\left(-\\frac{1}{t^2}\\right) dt = -\\int \\frac{1}{1 + t^2} dt = -\\arctan t + C = -\\arctan \\frac{1}{x} + C $$ 七、万能三角代换 适用于含 $\\sin x$ 和 $\\cos x$ 的有理式积分，令 $t = \\tan \\frac{x}{2}$ 例8 $$ \\int \\frac{1}{1 + \\sin x} , dx $$ 解： 令 $t = \\tan \\frac{x}{2}$，则 $\\sin x = \\frac{2t}{1 + t^2}$，$dx = \\frac{2}{1 + t^2} dt$ $$ \\int \\frac{1}{1 + \\frac{2t}{1 + t^2}} \\cdot \\frac{2}{1 + t^2} dt = \\int \\frac{2}{(1 + t)^2} dt = -\\frac{2}{1 + t} + C = -\\frac{2}{1 + \\tan \\frac{x}{2}} + C $$ 八、配对积分法 利用对称性或配对技巧简化积分 例9 $$ \\int e^x \\sin x , dx $$ 解： 设 $I = \\int e^x \\sin x , dx$，对 $I$ 两次分部积分后解方程： $$ I = \\frac{e^x (\\sin x - \\cos x)}{2} + C $$ 九、积分表与递推公式 对复杂积分查表或使用递推公式 例10 $$ \\int \\sin^n x , dx $$ 解： 利用递推公式： $$ \\int \\sin^n x , dx = -\\frac{\\sin^{n-1} x \\cos x}{n} + \\frac{n - 1}{n} \\int \\sin^{n-2} x , dx $$ 十、数值积分与特殊函数 对无法用初等函数表达的积分，使用特殊函数（如误差函数、椭圆积分） 例11 $$ \\int e^{-x^2} , dx = \\frac{\\sqrt{\\pi}}{2} \\text{erf}(x) + C $$ 总结表格 方法 适用场景 关键步骤 基本积分公式 简单幂函数、三角函数等 直接应用公式 线性换元法 复合函数积分 凑微分，变量替换 分部积分法 乘积型积分（如 $x e^x$） 选择 $u$ 和 $dv$ 三角换元法 含根式 $\\sqrt{a^2 \\pm x^2}$ 三角代换消去根号 有理函数积分 分式多项式 部分分式分解 倒代换 分母次数高 令 $t = \\frac{1}{x}$ 万能三角代换 三角有理式积分 $t = \\tan \\frac{x}{2}$ 配对积分法 对称性或循环结构 建立方程求解 递推公式 高次幂积分（如 $\\sin^n x$） 逐步降幂 特殊函数 非初等积分（如 $e^{-x^2}$） 引入误差函数、椭圆积分等 掌握这些方法后，可灵活组合使用以解决复杂积分问题","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"数据结构十五天复习计划","slug":"kaoyan/guihua/数据结构十五天复习计划","date":"2025-03-29T06:46:18.000Z","updated":"2025-05-30T10:38:45.441Z","comments":true,"path":"2025/03/29/kaoyan/guihua/数据结构十五天复习计划/","permalink":"https://wwxnb261.github.io/2025/03/29/kaoyan/guihua/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8D%81%E4%BA%94%E5%A4%A9%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/","excerpt":"数据结构十五天复习计划","text":"以下是针对数据结构所有核心章节的重新规划方案，时间范围仍为3月29日-4月12日（共15天），覆盖考研要求的全部重点内容并融入实战训练。每日学习模块与时间分配高度适配您原有的任务卡框架。 📅 数据结构全章15天攻坚计划 总策略： ▷ 理论+代码+错题三合一 | ▷ 每日2.5小时集中突破 | ▷ 周末专题熔断补强 🔰 章节分布与时间轴 日期 核心章节 关联实战目标（代码+题型） 高危考点标注 3.29 线性表（顺序表/链表） 链表逆置（递归/非递归） ❗头结点与首元节点混淆 3.30 栈与队列 双栈模拟队列，循环队列判满方案 ❗出队后front指向的语义差异 3.31 字符串与KMP算法 手写Next数组生成代码 ❗部分匹配值的计算误差 4.1 树基础（二叉树性质） 利用完全二叉树性质解应用题 ❗非满二叉树节点数公式误用 4.2 二叉树遍历 非递归后序遍历（双栈法） ❗处理右子树时的栈操作顺序 4.3 平衡二叉树（AVL） 四种旋转类型代码默写 ❗平衡因子更新滞后导致失衡 4.4 堆与优先队列 堆排序的原地实现 ❗建堆时下滤操作的起点选择 4.5 图存储（邻接矩阵/表） 邻接表转逆邻接表算法 ❗顶点索引从0/1开始的一致性 4.6 图遍历（DFS/BFS） 检测图中是否存在环（DFS染色法） ❗回溯时颜色标记未重置 4.7 最短路径（Dijkstra） 路径还原（pre数组回溯） ❗负权边导致的算法失效 4.8 最小生成树（Prim/Kruskal） 并查集实现Kruskal ❗边排序时权重相同处理顺序 4.9 查找（BST/AVL/B树） B树插入分裂的手动模拟 ❗节点关键字数超过阶数-1 4.10 散列表（哈希冲突） 不同探测法的ASL计算 ❗二次探测的探查序列生成错误 4.11 排序（快排/归并） 链式存储的归并排序实现 ❗哨兵结点在链表排序中的使用 4.12 综合复盘 近3年真题高频错题重做（标注错误类型） ❗时间分配与策略优化 ⚡ 每日学习闭环设计 14:00-15:00 理论精讲：结合教材与思维导图速记核心公式（如二叉树高度公式 $h = \\lfloor \\log_2 n \\rfloor + 1$） 动画解析：观看关键算法动态演示（如AVL树旋转、Dijkstra松弛过程） 15:00-16:00 代码手撕：完成当日代码目标（如双栈模拟队列需控制时间复杂度≤O(1)均摊） LeetCode补强：精选1道对应章节高频题（例：用KMP解决28. 实现 strStr()） 21:30-22:00 错题熔断：针对当日练习暴露的弱点，使用「5分钟快解模板」强化（如哈希表冲突处理速记表） 📌 重点章节特训方案 树与图的双向打通（4.1-4.7） 树的应用：将二叉树遍历模板迁移至图的DFS（递归栈帧 ⇌ 显式栈） 图的特性：通过树的层次遍历理解BFS的层序思想 查找与排序的联合训练（4.9-4.11） 对比BST中序有序性与排序算法的稳定性 用哈希表优化排序（如桶排序的散列函数设计） 📊 动态难度调控表 学习状态 调整策略 工具推荐 单日代码通过率＜50% 降级训练：改用伪代码→注释→填空三步法 《算法笔记》题型分类 概念题连续错误 使用「费曼技巧」自述流程并录音纠错 Anki记忆卡（含易错点） 时间严重超支 启动「20分钟暴力破解法」限时训练 番茄钟强制分段 📦 配套资源包 代码模板速查手册（部分示例）： 1234567891011121314151617// 非递归先序遍历（标记法）void PreOrder(TreeNode* root) &#123; stack&lt;TreeNode*&gt; st; if (root) st.push(root); while (!st.empty()) &#123; TreeNode* node = st.top(); st.pop(); if (node) &#123; if (node-&gt;right) st.push(node-&gt;right); // 右 if (node-&gt;left) st.push(node-&gt;left); // 左 st.push(node); // 中 st.push(nullptr); // 标记 &#125; else &#123; node = st.top(); st.pop(); printf(&quot;%d &quot;, node-&gt;val); &#125; &#125;&#125; 易错点红宝书（节选）： 链式前向星存图时，边的插入顺序影响遍历结果（需逆序插入） 堆排序中，下标从0开始和从1开始的父子节点计算公式不同","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"}]},{"title":"数学和408复习计划","slug":"kaoyan/guihua/数学和408复习计划","date":"2025-03-29T06:23:20.000Z","updated":"2025-05-30T10:38:57.147Z","comments":true,"path":"2025/03/29/kaoyan/guihua/数学和408复习计划/","permalink":"https://wwxnb261.github.io/2025/03/29/kaoyan/guihua/%E6%95%B0%E5%AD%A6%E5%92%8C408%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/","excerpt":"数学和408复习计划","text":"总体复习框架 根据你的需求，我将按照以下框架为你制定3.29-4.12的冲刺计划（共15天），重点针对高数刷题和数据结构复习，采用模块化+渐进式训练模式： 一、每日时间框架（建议模板） 12345678:00-8:30 晨间记忆（英语核心词汇200个+数学公式默写）8:30-10:30 高数专题突破（番茄钟*3，每50分钟+10分钟错题整理）10:30-12:00 上课时间（执行高数刷题任务）14:00-16:00 数据结构专项训练（含代码手写+算法推导）16:30-18:00 专业课1/2交叉学习（保持408整体节奏）19:30-21:30 综合任务（当日错题复盘+英语阅读训练）21:30-22:30 机动时间（补漏/提前完成奖励休息） 注：上课时间直接使用《李林880题》或《张宇1000题》按章节刷题 二、高等数学刷题执行方案（3.29-4.12） 核心目标：完成核心题型地毯式排查 日期区间 重点章节 每日题量 核心训练点 工具建议 3.29-4.1 多元函数微分法 18题/天 条件极值、隐函数求导链式法则 错题本分色标记系统 4.2-4.4 重积分应用 20题/天 坐标系转换技巧、物理应用题 Geogebra动态验证 4.5-4.7 微分方程 15题/天 高阶线性方程构造解的结构分析 题型分类速查表 4.8-4.10 级数专题 12题/天 幂级数求和函数收敛半径速判 思维导图串联定理 4.11-4.12 综合模拟 3套真题 时间控制（≤2.5小时/套） 仿真答题卡 每日附加任务：睡前用A4纸默写当日重点题型的解题框架（如曲面积分五步法） 周末强化：周六上午进行全真模考，周日下午进行错题手术刀式剖析 三、数据结构攻坚计划（3.29-4.12） 核心策略：算法实现+复杂度分析的二元训练法 周期 核心战场 每日任务分解 能力强化重点 3.29-4.2 树与二叉树 1. 非递归遍历代码手写（早）2. 平衡树调整实操（晚） 指针操作防错训练 4.3-4.5 图论算法 1. Dijkstra/Floyd对比实现2. 拓扑排序变式训练 临界条件压力测试 4.6-4.8 查找排序 1. B+树插入删除全流程动画推演2. 外部排序败者树 磁盘IO模拟计算 4.9-4.11 动态存储管理 1. 伙伴系统分配回收实操2. 内存碎片化数学建模 边界案例暴力枚举 4.12 压轴冲刺 2019-2023真题算法题限时重做 伪代码到标准C的转换规范 每日标配：LeetCode精选（3道）+ 王道课后思考题（2道） 凌晨闪存：睡前用费曼技巧口述当日算法核心逻辑（手机录音自查） 四、关键控制点 错题熔断机制：同一知识点连续3次出错立即启动专项特训（如晚间的21:30-22:30时段） 进度看板管理：推荐使用Notion建立双周冲刺看板，每日22:00更新完成度雷达图 生理节律适配：将数学证明类任务安排在脑力黄金时段（上午8-10点），算法编码放在午后（14-16点） 五、紧急情况预案 若某日进度延误≥30%，次日启动「6-3-1急救模式」：60%时间补漏+30%当前进度+10%缓冲 遇到知识盲区时，立即使用「3步止血法」：①看教材定理 ②观名师精讲（3b1b/王道）③做靶向练习 建议每天早晨用5分钟浏览当日任务地图，晚间用10分钟进行PDCA循环检查 细节规划 以下是针对高等数学和数据结构的具体章节知识点对照表及每日执行细节，结合你的截止日期（4月12日）进行精准拆分： 一、高等数学刷题章节知识点对照表（3.29-4.12） 1. 多元函数微分法（3.29-4.1） 核心题型： 隐函数求导（方程组情形） 条件极值（拉格朗日乘数法构造技巧） 方向导数与梯度几何意义应用题 必刷题源： 《李林880题》基础篇：P78-82 题号3,7,11,15,19 《张宇1000题》B组：题号23,26,31（链式法则陷阱题） 防错重点： 使用「变量关系图」避免链式法则漏导 2. 重积分应用（4.2-4.4） 核心题型： 极坐标系下积分限快速定界（θ-r扫描法） 物理应用题（质心/转动惯量的积分建模） 二重积分分段处理（绝对值/分段函数情形） 必刷题源： 《李林880题》提高篇：P102-105 题号8,12,17（旋转体惯量） 《真题大全解》2016年卷三第18题（坐标系切换） 工具强化： 用GeoGebra动态验证积分区域 3. 微分方程（4.5-4.7） 核心题型： 高阶线性方程特解构造（多项式叠加判定） 欧拉方程变量代换通解 微分方程与几何应用结合题（切线/法线建方程） 必刷题源： 《张宇1000题》C组：题号44,47（物理背景应用题） 教材课后题：同济七版第7章总复习题12,15（变量替换难点） 速记技巧： 制作「微分方程类型判定流程图」贴于书桌 4. 级数专题（4.8-4.10） 核心题型： 幂级数求和函数（逐项积分/微分法） 傅里叶级数收敛定理应用 正项级数审敛法综合判断（比较法+根值法联用） 必刷题源： 《李林880题》综合篇：P189-192 题号9,14,20（阿贝尔定理陷阱题） 2019年真题：数一第19题（级数与微分方程综合题） 突破技巧： 对收敛域端点单独建立判断案例库 5. 综合模拟（4.11-4.12） 建议套卷： 2022年真题（严格计时）+ 李林6套卷（选填专项） 复盘重点： 大题步骤分对照（使用《真题评分细则》自查） 二、数据结构每日执行细节（3.29-4.12） 1. 树与二叉树（3.29-4.2） 代码实操清单：1234- Day1：非递归先序遍历（栈实现）+ 计算二叉树宽度- Day2：线索二叉树构造（中序）+ 平衡树LL/RR旋转- Day3：哈夫曼编码生成（优先队列实现）+ 树形DP求最大路径和- Day4：红黑树插入全案例推演（至少3种冲突场景） 复杂度专项： 推导平衡树删除操作的均摊时间复杂度 对比B树与B+树在磁盘访问次数上的差异 2. 图论算法（4.3-4.5） 手写代码重点： 邻接表存储的DFS非递归实现 Floyd算法动态规划迭代过程（矩阵逐步更新） 关键路径算法中的事件最早/最晚时间计算 应用题强化： 动态规划与Dijkstra在最短路径中的适用场景对比 拓扑排序检测环的两种实现（DFS入度法） 3. 查找排序（4.6-4.8） 手撕代码重点： 三路划分快速排序（处理重复元素） B+树插入分裂过程（模拟5阶B+树连续插入1-100） 败者树多路归并（手动模拟8个归并段场景） 冷门考点： 分析希尔排序不同增量序列的优劣（Hibbard vs Sedgewick） 散列表二次聚集现象数学证明 4. 动态存储管理（4.9-4.11） 实操训练： 伙伴系统分配请求序列模拟（如申请16K→8K→32K） 边界标识法合并空闲块的手动演示 计算题重点： 最佳适配/最差适配算法碎片率计算 虚拟内存页面置换算法Belady现象复现 5. 压轴冲刺（4.12） 真题精选： 2021年真题：矩阵快速转置（三元组存储） 2023年真题：Kruskal算法+并查集优化 考场避坑： 严格区分next数组的两种生成版本（严蔚敏 vs 王道） 三、执行监控工具包 高数刷题追踪表： 日期 完成题号 单题耗时 错误类型（A计算/B概念/C技巧） 熔断标记 3.29 880-3,7 15min B（链式法则漏变量） 已启动 数据结构代码自查清单： [ ] 指针修改前备份原始值（防断链） [ ] 递归函数出口条件覆盖所有边界 [ ] 复杂度计算包含递归栈空间 缓冲时间分配建议： 每周日晚预留2小时作为「错题急诊室」 每完成一个章节奖励30分钟「自由探索时间」（如看3Blue1Brown视频） 需要我为你生成可打印的PDF版本任务卡吗？或是调整某些模块的强度？","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"数学计划","slug":"数学计划","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"}]},{"title":"平方和求和公式","slug":"kaoyan/shuxue/平方和求和公式","date":"2025-03-27T07:34:01.000Z","updated":"2025-03-27T07:58:58.368Z","comments":true,"path":"2025/03/27/kaoyan/shuxue/平方和求和公式/","permalink":"https://wwxnb261.github.io/2025/03/27/kaoyan/shuxue/%E5%B9%B3%E6%96%B9%E5%92%8C%E6%B1%82%E5%92%8C%E5%85%AC%E5%BC%8F/","excerpt":"平方和求和公式","text":"平方求和公式是指计算从 $1^2$ 到 $n^2$ 的和，即： $$ S = 1^2 + 2^2 + 3^2 + \\dots + n^2 $$ 其结果为： $$ S = \\frac{n(n+1)(2n+1)}{6} $$ 推导过程（利用立方差公式） 写出立方差关系： 注意到 $(k+1)^3 - k^3 = 3k^2 + 3k + 1$，对 $k = 1$ 到 $n$ 依次展开： $$ \\begin{align*} 2^3 - 1^3 &= 3 \\cdot 1^2 + 3 \\cdot 1 + 1 \\\\ 3^3 - 2^3 &= 3 \\cdot 2^2 + 3 \\cdot 2 + 1 \\\\ &\\vdots \\\\ (n+1)^3 - n^3 &= 3 \\cdot n^2 + 3 \\cdot n + 1 \\end{align*} $$ 累加所有等式： 将上述 $n$ 个等式相加，左边大部分项抵消，得到： $$ (n+1)^3 - 1^3 = 3 \\sum_{k=1}^n k^2 + 3 \\sum_{k=1}^n k + \\sum_{k=1}^n 1 $$ 代入已知求和公式： 已知： $$ \\sum_{k=1}^n k = \\frac{n(n+1)}{2}, \\quad \\sum_{k=1}^n 1 = n $$ 代入后： $$ n^3 + 3n^2 + 3n = 3S + \\frac{3n(n+1)}{2} + n $$ 解方程求 $S$： 整理方程： $$ 3S = n^3 + 3n^2 + 3n - \\frac{3n(n+1)}{2} - n $$ 化简后得到： $$ S = \\frac{n(n+1)(2n+1)}{6} $$ 验证公式（数学归纳法） 基例（$n=1$）： $$ S = 1^2 = 1, \\quad \\frac{1 \\cdot 2 \\cdot 3}{6} = 1 \\quad \\text{成立}. $$ 归纳假设： 假设公式对 $n = k$ 成立，即： $$ 1^2 + 2^2 + \\dots + k^2 = \\frac{k(k+1)(2k+1)}{6} $$ 证明对 $n = k+1$ 成立： 计算： $$ S_{k+1} = S_k + (k+1)^2 = \\frac{k(k+1)(2k+1)}{6} + (k+1)^2 $$ 化简后： $$ S_{k+1} = \\frac{(k+1)(k+2)(2k+3)}{6} $$ 符合公式，得证。 示例计算 当 $n=3$ 时： $$ 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14, \\quad \\frac{3 \\cdot 4 \\cdot 7}{6} = 14 $$ 当 $n=5$ 时： $$ 1^2 + 2^2 + \\dots + 5^2 = 55, \\quad \\frac{5 \\cdot 6 \\cdot 11}{6} = 55 $$ 应用场景 概率统计：计算离散数据的方差。 物理与工程：分析能量分布或惯性矩。 算法分析：评估时间复杂度（如嵌套循环）。 总结：平方和公式是基础数学工具，掌握其推导与验证方法，可灵活应用于科学计算与实际问题。 ✅ 验证报告： 已转化行内公式：6处 已调整独立公式：12处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"二重积分或几何中特殊曲线总结","slug":"kaoyan/shuxue/二重积分或几何中特殊曲线总结","date":"2025-03-27T06:21:20.000Z","updated":"2025-03-27T06:25:36.747Z","comments":true,"path":"2025/03/27/kaoyan/shuxue/二重积分或几何中特殊曲线总结/","permalink":"https://wwxnb261.github.io/2025/03/27/kaoyan/shuxue/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E6%88%96%E5%87%A0%E4%BD%95%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%9B%B2%E7%BA%BF%E6%80%BB%E7%BB%93/","excerpt":"二重积分或几何中特殊曲线总结","text":"以下是高等数学中常见的特殊曲线总结，包含名称、方程、图像特征及典型应用： 总结 1. 星形线（Astroid） 方程： 直角坐标：$x^{2/3} + y^{2/3} = a^{2/3}$ 参数方程：$x = a\\cos^3\\theta$, $y = a\\sin^3\\theta$ 图像：四尖点对称，形似四角星。 应用：内摆线特例（小圆半径为大圆的1/4），积分对称性示例。 2. 心脏线（Cardioid） 方程： 极坐标：$r = a(1 + \\cos\\theta)$ 参数方程：$x = a(2\\cos\\theta - \\cos2\\theta)$, $y = a(2\\sin\\theta - \\sin2\\theta)$ 图像：心形，单尖点。 应用：蜗线的一种，声学与光学中的焦散曲线。 3. 笛卡尔叶形线（Folium of Descartes） 方程： 直角坐标：$x^3 + y^3 = 3axy$ 参数方程：$x = \\frac{3at}{1 + t^3}$, $y = \\frac{3at^2}{1 + t^3}$ 图像：单叶通过原点，渐近线为$x + y + a = 0$。 应用：参数方程与极限分析范例。 4. 双纽线（Lemniscate） 方程： 伯努利双纽线：$(x^2 + y^2)^2 = a^2(x^2 - y^2)$ 极坐标：$r^2 = a^2\\cos2\\theta$ 图像：横置的“∞”形，两焦点对称。 应用：复数平面上模数的几何表示。 5. 摆线（Cycloid） 方程： 参数方程： $$ x = a(\\theta - \\sin\\theta), \\quad y = a(1 - \\cos\\theta) $$ 图像：周期性拱形，无端点。 应用：最速降线问题，力学中的等时曲线。 6. 外摆线（Epicycloid）与内摆线（Hypocycloid） 方程（外摆线为例）： 参数方程： $$ x = (R + r)\\cos\\theta - r\\cos\\left(\\frac{R + r}{r}\\theta\\right), \\quad y = (R + r)\\sin\\theta - r\\sin\\left(\\frac{R + r}{r}\\theta\\right) $$ 特例： 星形线：内摆线（$R = 4r$）。 心脏线：外摆线（$R = r$）。 应用：齿轮齿形设计，几何变换案例。 7. 阿基米德螺线（Archimedean Spiral） 方程： 极坐标：$r = a\\theta$ 图像：每圈间距相等的螺旋线。 应用：机械凸轮设计，极坐标积分示例。 8. 对数螺线（Logarithmic Spiral） 方程： 极坐标：$r = ae^{b\\theta}$ 图像：间距随角度指数增长的螺旋线。 应用：自然界中的生长模式（如鹦鹉螺壳）。 9. 悬链线（Catenary） 方程： 直角坐标：$y = a\\cosh\\left(\\frac{x}{a}\\right)$ 图像：两端下垂的曲线，与抛物线不同。 应用：桥梁与拱门设计，最小势能问题。 10. 玫瑰线（Rose Curve） 方程： 极坐标：$r = a\\cos(k\\theta)$ 或 $r = a\\sin(k\\theta)$ 类型： 三叶玫瑰线（$k = 3$）：三瓣对称。 四叶玫瑰线（$k = 2$）：四瓣对称。 应用：极坐标绘图与对称性分析。 11. 箕舌线（Witch of Agnesi） 方程： 直角坐标：$y = \\frac{8a^3}{x^2 + 4a^2}$ 图像：钟形曲线，渐近线为$y = 0$。 应用：概率密度函数的历史原型。 12. 蚌线（Conchoid） 方程（以尼科米德蚌线为例）： 极坐标：$r = a + b\\sec\\theta$ 图像：依据参数不同，可能为闭合或分支曲线。 应用：经典几何问题（三等分角）。 13. 双曲线（Hyperbola）与椭圆（Ellipse） 双曲线： 方程：$\\frac{x^2}{a^2} - \\frac{y^2}{b^2} = 1$ 应用：天体轨道（开放路径）、渐近行为分析。 椭圆： 方程：$\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$ 应用：行星轨道、几何变换。 14. 抛物线（Parabola） 方程：$y^2 = 4ax$ 应用：抛体运动轨迹、光学反射性质。 15. 马鞍面曲线（双曲抛物面截线） 方程：$z = xy$ 或 $x^2 - y^2 = z$ 图像：鞍形，沿不同方向开口相反。 应用：鞍点分析、多变量函数极值示例。 总结表 曲线名称 典型方程 图像特征 应用场景 星形线 $x^{2/3} + y^{2/3} = a^{2/3}$ 四尖点对称 积分对称性分析 心脏线 $r = a(1 + \\cos\\theta)$ 心形单尖点 蜗线运动、焦散现象 笛卡尔叶形线 $x^3 + y^3 = 3axy$ 单叶过原点 参数方程范例 双纽线 $(x^2 + y^2)^2 = a^2(x^2 - y^2)$ 横置“∞”形 复数几何、对称积分 摆线 $x = a(\\theta - \\sin\\theta)$ 周期性拱形 最速降线、力学问题 阿基米德螺线 $r = a\\theta$ 等间距螺旋 极坐标积分、机械设计 悬链线 $y = a\\cosh(x/a)$ 下垂曲线 桥梁设计、最小势能 玫瑰线 $r = a\\cos(k\\theta)$ 多瓣对称 极坐标绘图 双曲抛物面截线 $z = xy$ 马鞍形 多变量极值、鞍点分析 注：以上曲线在高等数学中常用于演示参数方程、极坐标、对称性积分、几何变换等概念，实际应用中需结合具体场景选择合适模型。 参数方程形式 高等数学特殊曲线总结表 曲线名称 典型方程 参数方程形式 图像特征 应用场景 1. 星形线 $x^{2/3} + y^{2/3} = a^{2/3}$ $x = a\\cos^3\\theta$, $y = a\\sin^3\\theta$ 四尖点对称 积分对称性分析 2. 心脏线 $r = a(1 + \\cos\\theta)$ $x = a(2\\cos\\theta - \\cos2\\theta)$, $y = a(2\\sin\\theta - \\sin2\\theta)$ 心形单尖点 蜗线运动、焦散现象 3. 笛卡尔叶形线 $x^3 + y^3 = 3axy$ $x = \\frac{3at}{1 + t^3}$, $y = \\frac{3at^2}{1 + t^3}$ 单叶过原点 参数方程范例 4. 双纽线 $(x^2 + y^2)^2 = a^2(x^2 - y^2)$ $x = a\\cos\\theta\\sqrt{\\cos2\\theta}$, $y = a\\sin\\theta\\sqrt{\\cos2\\theta}$ 横置“∞”形 复数几何、对称积分 5. 摆线 — $x = a(\\theta - \\sin\\theta)$, $y = a(1 - \\cos\\theta)$ 周期性拱形 最速降线、力学问题 6. 外摆线 — $x = (R + r)\\cos\\theta - r\\cos\\left(\\frac{R + r}{r}\\theta\\right)$ $y = (R + r)\\sin\\theta - r\\sin\\left(\\frac{R + r}{r}\\theta\\right)$ 外滚轮轨迹 齿轮设计、几何变换 7. 内摆线 — $x = (R - r)\\cos\\theta + r\\cos\\left(\\frac{R - r}{r}\\theta\\right)$ $y = (R - r)\\sin\\theta - r\\sin\\left(\\frac{R - r}{r}\\theta\\right)$ 内滚轮轨迹 星形线特例（$R = 4r$） 8. 阿基米德螺线 $r = a\\theta$ $x = a\\theta\\cos\\theta$, $y = a\\theta\\sin\\theta$ 等间距螺旋 极坐标积分、机械设计 9. 对数螺线 $r = ae^{b\\theta}$ $x = ae^{b\\theta}\\cos\\theta$, $y = ae^{b\\theta}\\sin\\theta$ 指数增长螺旋 自然生长模型 10. 悬链线 $y = a\\cosh\\left(\\frac{x}{a}\\right)$ $x = t$, $y = a\\cosh\\left(\\frac{t}{a}\\right)$ 下垂曲线 桥梁设计、最小势能 11. 玫瑰线 $r = a\\cos(k\\theta)$ $x = a\\cos(k\\theta)\\cos\\theta$, $y = a\\cos(k\\theta)\\sin\\theta$ 多瓣对称 极坐标绘图 12. 箕舌线 $y = \\frac{8a^3}{x^2 + 4a^2}$ $x = 2a\\tan\\theta$, $y = 2a\\cos^2\\theta$ 钟形曲线 概率密度原型 13. 蚌线 $r = a + b\\sec\\theta$ $x = a + b\\sec\\theta$, $y = (a + b\\sec\\theta)\\tan\\theta$ 分支或闭合曲线 经典几何问题 14. 双曲线 $\\frac{x^2}{a^2} - \\frac{y^2}{b^2} = 1$ $x = a\\sec\\theta$, $y = b\\tan\\theta$ 或 $x = a\\cosh t$, $y = b\\sinh t$ 双开口分支 天体轨道、渐近分析 15. 椭圆 $\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$ $x = a\\cos\\theta$, $y = b\\sin\\theta$ 闭合对称椭圆 行星轨道、几何变换 16. 抛物线 $y^2 = 4ax$ $x = at^2$, $y = 2at$ 单开口对称曲线 抛体运动、光学反射 17. 双曲抛物面截线 $z = xy$ $x = t$, $y = s$, $z = ts$（三维参数） 二维截线：$x = t$, $y = k/t$ 马鞍形 多变量极值、鞍点分析 关键说明 参数方程变量：表中统一使用 $\\theta$ 或 $t$ 作为参数，具体意义根据曲线类型调整。 三维曲线处理：双曲抛物面截线（马鞍面）需三维参数方程，但常用二维截线简化分析。 极坐标转换：部分曲线的参数方程通过极坐标方程直接转换而来（如 $r = a\\theta$ → $x = a\\theta\\cos\\theta$, $y = a\\theta\\sin\\theta$）。 特例关联：星形线是内摆线特例（$R = 4r$），心脏线是外摆线特例（$R = r$）。 应用示例 星形线积分：利用参数方程计算弧长： $$ \\int_0^{2\\pi} \\sqrt{(dx/d\\theta)^2 + (dy/d\\theta)^2} , d\\theta $$ 摆线最速降线：通过参数方程分析质点在重力作用下的运动时间。 双纽线对称性：利用极坐标参数方程验证积分对称性： $$ \\iint r^2 \\cos2\\theta , drd\\theta $$","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"408复习计划规划","slug":"kaoyan/guihua/408复习计划规划","date":"2025-03-26T07:38:04.000Z","updated":"2025-05-30T10:37:31.621Z","comments":true,"path":"2025/03/26/kaoyan/guihua/408复习计划规划/","permalink":"https://wwxnb261.github.io/2025/03/26/kaoyan/guihua/408%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E8%A7%84%E5%88%92/","excerpt":"408复习计划规划","text":"以下是基于王道论坛及多位考生经验总结的408计算机专业课考研复习经验整理，涵盖复习策略、时间规划、重点科目及常见误区等内容，供参考： 一、参考书与资料推荐 核心辅导书 王道系列：四本单科书（数据结构、计组、操作系统、计网）+ 真题解析 + 模拟题（推荐8套卷）。 天勤：数据结构部分讲解较细致，适合基础薄弱或跨考生。 教材补充：如唐朔飞《计算机组成原理》、谢希仁《计算机网络》等，用于辅助理解难点。 其他资料：肖秀荣政治系列、李永乐数学全书等公共课资料。 视频资源 王道冲刺视频（用于知识点串讲）。 天勤数据结构视频（针对算法难点）。 B站灰灰考研的真题解析。 二、复习顺序与策略 科目顺序建议 推荐顺序：数据结构 → 计算机组成原理 → 操作系统 → 计算机网络。 理由：数据结构是基础，计组与OS关联性强，计网相对独立可后期突击。 另类顺序：操作系统（易入门）→ 计组（最难）→ 数据结构 → 计网（按状态调整，适合时间紧张者）。 复习阶段划分 基础阶段（3-6月）：通读教材+王道单科，完成选择题，标记错题。 强化阶段（7-9月）：二刷单科书，攻克大题（如PV操作、Cache设计、TCP协议等），结合真题专项练习。 冲刺阶段（10-12月）：限时模拟真题（至少2遍），查漏补缺，回归课本细节。 三、各科核心重点与学习方法 数据结构 重点：线性表、二叉树遍历、图算法（最短路径、关键路径）、排序与查找（快排、堆排、B树）。 技巧：算法题注重思想而非代码细节，用伪代码或简化解法即可。 计算机组成原理 重点：存储器层次、指令系统、CPU数据通路、中断与总线。 技巧：结合冯诺依曼结构理解整体流程，多画图辅助记忆（如Cache映射）。 操作系统 重点：进程调度、PV操作、死锁、虚拟内存（请求调页）、文件管理。 规律：PV操作隔年考，需掌握经典模型（如生产者-消费者）。 计算机网络 重点：传输层（TCP/UDP）、网络层（IP协议、路由算法）、数据链路层（CSMA/CD、MAC协议）。 技巧：自底向上分层学习，结合“送信”场景理解协议交互。 四、真题与模拟题使用要点 真题 重要性：至少刷2遍，近10年真题需限时模拟（14:00-17:00），分析错题关联知识点。 趋势：近年考题趋向跨科目综合（如OS与计组结合），需建立知识网络。 模拟题 王道模拟题难度贴近真题，天勤题目偏但可拓宽思路。 留1-2套考前模拟，保持手感。 五、常见误区与避坑指南 忽视课本：仅依赖辅导书易遗漏细节（如TCP协议图例中的英文术语），建议结合教材查缺。 盲目刷题：大题需专项突破，优先掌握高频题型（如算法思想、计组综合设计）。 时间分配不均：408需日均3小时以上，避免后期挤压其他科目（如政治）。 死记硬背：注重理解设计思想（如抽象、分层、缓冲），而非机械记忆。 六、时间规划参考（以7月为起点） 阶段 时间 任务 基础 7-8月 完成四科教材+王道单科一轮，选择题标记错题。 强化 9-10月 二刷单科书，专项攻克大题，开始真题分模块练习。 冲刺 11-12月 限时模拟真题+模拟题，回归课本查漏补缺。 七、心态与资源 心态：408内容多但规律性强，坚持按计划推进即可，避免焦虑。 资源整合：关注王道论坛、B站UP主（如“灰灰考研”）及公众号（如“计算机与软件考研”）获取最新资料。 以上经验整合自多位高分考生分享，需结合自身基础调整。更多细节可参考原文链接：王道论坛。","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"}]},{"title":"二重积分D对称性总结","slug":"kaoyan/shuxue/二重积分D对称性总结","date":"2025-03-26T06:41:07.000Z","updated":"2025-03-26T06:43:01.452Z","comments":true,"path":"2025/03/26/kaoyan/shuxue/二重积分D对称性总结/","permalink":"https://wwxnb261.github.io/2025/03/26/kaoyan/shuxue/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86D%E5%AF%B9%E7%A7%B0%E6%80%A7%E6%80%BB%E7%BB%93/","excerpt":"二重积分D对称性总结","text":"在积分计算中，利用对称性可以大幅简化运算。以下是针对不同对称类型和被积函数奇偶性的总结，涵盖直角坐标系、极坐标系及常见注意事项： 一、直角坐标系下的对称性 1. 关于 $x$ 轴对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(x, -y) \\in D$。 被积函数奇偶性： 奇函数：$f(x, -y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(x, -y) = f(x, y)$ → 积分可简化为 2倍上半区域积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D y , dA$。 ∵ $y$ 是 $y$ 的奇函数 → 积分结果为 0。 2. 关于 $y$ 轴对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(-x, y) \\in D$。 被积函数奇偶性： 奇函数：$f(-x, y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(-x, y) = f(x, y)$ → 积分可简化为 2倍右半区域积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D x^3 , dA$。 ∵ $x^3$ 是 $x$ 的奇函数 → 积分结果为 0。 3. 关于原点对称的区域 区域条件：若点 $(x, y) \\in D$，则 $(-x, -y) \\in D$。 被积函数奇偶性： 奇函数：$f(-x, -y) = -f(x, y)$ → 积分结果为 0。 偶函数：$f(-x, -y) = f(x, y)$ → 积分可简化为 4倍第一象限积分。 示例： 区域 $D: x^2 + y^2 \\leq 1$，计算 $\\iint_D xy , dA$。 ∵ $xy$ 是原点奇函数 → 积分结果为 0。 二、极坐标系下的对称性 1. 角度对称性（关于 $\\theta$ 对称） 区域条件：区域在极坐标中关于角度 $\\theta$ 对称（如圆形、扇形）。 被积函数特性： 若被积函数仅与 $r$ 有关（如 $f®$），则积分可简化为： $$ \\int_0^{2\\pi} \\int_0^R f® \\cdot r , dr , d\\theta = 2\\pi \\int_0^R f® \\cdot r , dr. $$ 示例： 计算 $\\iint_{x^2 + y^2 \\leq R^2} e^{-(x^2 + y^2)} , dA = 2\\pi \\int_0^R e^{-r^2} r , dr$。 2. 关于 $\\theta = \\pi/2$ 对称（直角坐标与极坐标结合） 区域条件：区域关于 $y = x$ 对称（如正方形、对称扇形）。 被积函数特性： 若 $f(x, y) = f(y, x)$，可简化积分范围为 $\\theta \\in [0, \\pi/4]$，再乘对称倍数。 示例： 区域 $D: 0 \\leq x \\leq 1, 0 \\leq y \\leq 1$，计算 $\\iint_D (x + y) , dA$。 可分解为两次单积分，无需对称性简化。 三、三重积分的对称性扩展 1. 关于坐标平面对称 区域条件：若点 $(x, y, z) \\in V$，则对称点 $(x, y, -z) \\in V$。 被积函数奇偶性： 奇函数：$f(x, y, -z) = -f(x, y, z)$ → 积分结果为 0。 偶函数：积分简化为 2倍上半空间积分。 2. 球对称区域 区域条件：球体 $x^2 + y^2 + z^2 \\leq R^2$。 被积函数特性： 若仅与半径 $r$ 有关（如 $f®$），积分可转换为球坐标系： $$ \\iiint_V f® , dV = 4\\pi \\int_0^R f® \\cdot r^2 , dr. $$ 四、注意事项与常见错误 场景 正确操作 常见错误 判断对称性 严格验证区域关于对称轴/面对称 误判非对称区域为对称区域 混合奇偶性函数 拆分函数为奇偶部分，分别处理（如 $f = f_{\\text{奇}} + f_{\\text{偶}}$） 未拆分直接应用对称性导致错误 极坐标/球坐标转换 检查雅可比行列式（极坐标：$r$，球坐标：$r^2 \\sin\\theta$） 遗漏体积元导致积分错误 多重积分对称性 逐层分析各变量对称性（如先对 $x$，再对 $y$） 同时处理多变量对称性导致混乱 五、总结公式表 对称类型 被积函数条件 积分结果 关于 $x$ 轴对称 $f(x, -y) = -f(x, y)$ 0 关于 $x$ 轴对称 $f(x, -y) = f(x, y)$ 2倍上半区域积分 关于 $y$ 轴对称 $f(-x, y) = -f(x, y)$ 0 关于 $y$ 轴对称 $f(-x, y) = f(x, y)$ 2倍右半区域积分 关于原点对称 $f(-x, -y) = -f(x, y)$ 0 关于原点对称 $f(-x, -y) = f(x, y)$ 4倍第一象限积分 球对称 $f®$ $4\\pi \\int_0^R f® r^2 , dr$ 核心结论： 对称性分析的关键在于 区域对称性 与 函数奇偶性 的匹配。通过拆分积分区域和函数，可快速简化计算或直接得出结果为零。始终优先验证对称条件，避免盲目应用公式！ ✅ 验证报告： 已转化行内公式：28处 已调整独立公式：5处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"反三角替换规则","slug":"kaoyan/shuxue/反三角替换规则","date":"2025-03-26T03:38:52.000Z","updated":"2025-03-26T03:39:43.433Z","comments":true,"path":"2025/03/26/kaoyan/shuxue/反三角替换规则/","permalink":"https://wwxnb261.github.io/2025/03/26/kaoyan/shuxue/%E5%8F%8D%E4%B8%89%E8%A7%92%E6%9B%BF%E6%8D%A2%E8%A7%84%E5%88%99/","excerpt":"关于反三角函数的转换注意范围以及事项","text":"转换完成文档 在三角方程中，出现 $\\pi - \\arcsin x$ 的解是因为 正弦函数在 $[0, \\pi]$ 区间内的对称性。以下是详细解释： 1. 正弦函数的图像特性 正弦函数 $\\sin \\theta$ 在区间 $[0, \\pi]$ 内具有对称性： 当 $\\theta \\in \\left[ 0, \\frac{\\pi}{2} \\right]$，$\\sin \\theta$ 单调递增。 当 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\pi \\right]$，$\\sin \\theta$ 单调递减，且满足： $$ \\sin(\\pi - \\theta) = \\sin \\theta \\quad (\\theta \\in \\mathbb{R}). $$ 2. 方程 $\\sin \\theta = x$ 的解 对于方程 $\\sin \\theta = x$（其中 $x \\in [-1, 1]$），其解为： $$ \\theta = \\arcsin x + 2k\\pi \\quad \\text{或} \\quad \\theta = \\pi - \\arcsin x + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 原因： 主值解：$\\arcsin x$ 返回的是 $\\theta \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$ 的解。 对称性补充解：由于 $\\sin(\\pi - \\theta) = \\sin \\theta$，补充解为 $\\pi - \\arcsin x$，覆盖 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$ 的情况。 3. 几何解释（单位圆） 在单位圆上，若某角度的正弦值为 $x$，则存在两个可能的角度： 第一象限角：$\\theta_1 = \\arcsin x$（位于右半圆）。 第二象限角：$\\theta_2 = \\pi - \\arcsin x$（位于左半圆）。 这两个角度的正弦值相等（$\\sin \\theta_1 = \\sin \\theta_2 = x$），但余弦值相反（$\\cos \\theta_1 = -\\cos \\theta_2$）。 示例： 若 $\\sin \\theta = \\frac{1}{2}$，则解为： $$ \\theta = \\frac{\\pi}{6} \\quad \\text{或} \\quad \\theta = \\pi - \\frac{\\pi}{6} = \\frac{5\\pi}{6}. $$ 4. 实际应用场景 三角方程求解： 若要求 $\\theta \\in [0, \\pi]$，则需同时考虑 $\\arcsin x$ 和 $\\pi - \\arcsin x$。 示例：解三角形时，若已知两边及非夹角，可能有两解。 积分变量替换： 当通过 $x = \\sin \\theta$ 进行换元时，需根据积分区间选择正确的角度范围（例如，若 $\\theta \\in \\left[ \\frac{\\pi}{2}, \\pi \\right]$，则需用 $\\pi - \\arcsin x$ 表示。 5. 常见误区 错误结论：认为 $\\arcsin x$ 能覆盖所有解，忽略对称性补充解。 错误推导：直接将 $\\sin \\theta = x$ 写为 $\\theta = \\arcsin x$，导致遗漏解。 总结 情境 表达式 意义 主值解（右半圆） $\\theta = \\arcsin x$ 角度位于 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 对称性补充解（左半圆） $\\theta = \\pi - \\arcsin x$ 角度位于 $\\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$。 核心结论： $\\pi - \\arcsin x$ 是方程 $\\sin \\theta = x$ 的必要补充解，用于覆盖正弦函数在单位圆上的对称性区域。 ✅ 验证报告： 已转化行内公式：13处 已调整独立公式：3处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"arcsin反三角替换的时候注意事项","slug":"kaoyan/shuxue/arcsin反三角替换的时候注意事项","date":"2025-03-25T13:50:15.000Z","updated":"2025-03-25T13:55:29.972Z","comments":true,"path":"2025/03/25/kaoyan/shuxue/arcsin反三角替换的时候注意事项/","permalink":"https://wwxnb261.github.io/2025/03/25/kaoyan/shuxue/arcsin%E5%8F%8D%E4%B8%89%E8%A7%92%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%97%B6%E5%80%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"在将涉及 $\\sin x$ 的表达式转换为 $\\arcsin x$ 时，需注意以下关键事项： 1. 定义域与值域的限制 $\\arcsin x$ 的定义域：仅接受 $x \\in [-1, 1]$，超出此范围会导致无定义。 $\\arcsin x$ 的值域：输出角度范围为 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 示例： 若 $\\sin x = 2$，则方程无解，因为 $2 \\notin [-1, 1]$。 2. 解的多值性与主值选择 $\\sin x = y$ 的解： $$ x = \\arcsin y + 2k\\pi \\quad \\text{或} \\quad x = \\pi - \\arcsin y + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 直接写 $x = \\arcsin y$ 仅得到主值解（即 $x \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$），可能遗漏其他解。 示例： 方程 $\\sin x = \\frac{1}{2}$ 的解为： $$ x = \\frac{\\pi}{6} + 2k\\pi \\quad \\text{或} \\quad x = \\frac{5\\pi}{6} + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 3. 变量替换的合法性 替换 $y = \\sin x$ 时，需保证 $y \\in [-1, 1]$。 反向替换 $x = \\arcsin y$ 时，需明确 $x$ 的主值范围，避免超出 $\\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$。 示例： 若 $y = \\sin x$ 且 $x \\in \\left[ \\frac{\\pi}{2}, \\frac{3\\pi}{2} \\right]$，则反向替换应写为 $x = \\pi - \\arcsin y$。 4. 代数运算中的常见错误 错误操作：直接对等式两边取 $\\arcsin$。 正确操作：需结合三角恒等式和多值性分析。 反例： 若 $\\sin x = \\sin y$，不能直接推出 $x = y$，而应为： $$ x = y + 2k\\pi \\quad \\text{或} \\quad x = \\pi - y + 2k\\pi \\quad (k \\in \\mathbb{Z}). $$ 5. 微积分中的注意事项 导数公式： $$ \\frac{d}{dx} \\arcsin x = \\frac{1}{\\sqrt{1 - x^2}} \\quad (x \\in (-1, 1)). $$ 积分应用： 积分 $\\int \\frac{1}{\\sqrt{1 - x^2}} , dx = \\arcsin x + C$，仅在 $x \\in (-1, 1)$ 时有效。 6. 符号与平方根处理 表达式 $\\cos(\\arcsin x)$： 由于 $\\arcsin x \\in \\left[ -\\frac{\\pi}{2}, \\frac{\\pi}{2} \\right]$，余弦值非负，故： $$ \\cos(\\arcsin x) = \\sqrt{1 - x^2}. $$ 总结 操作 正确做法 常见错误 解方程 $\\sin x = y$ 考虑所有解：$x = \\arcsin y + 2k\\pi$ 或 $\\pi - \\arcsin y + 2k\\pi$ 仅写 $x = \\arcsin y$ 替换变量 $y = \\sin x$ 确保 $y \\in [-1, 1]$，并明确 $x$ 的范围 忽略 $y$ 的范围或 $x$ 的主值限制 导数/积分 检查定义域 $x \\in (-1, 1)$ 在 $x = \\pm 1$ 处错误应用公式 关键结论 始终验证输入值在 $[-1, 1]$ 内。 处理方程时考虑多值性，避免遗漏解。 在反向替换或运算中明确角度范围，确保结果合理性。 ✅ 验证报告： 已转化行内公式：17处 已调整独立公式：5处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"伽马函数的积分值","slug":"kaoyan/shuxue/伽马函数的积分值","date":"2025-03-25T12:17:23.000Z","updated":"2025-03-25T13:27:13.898Z","comments":true,"path":"2025/03/25/kaoyan/shuxue/伽马函数的积分值/","permalink":"https://wwxnb261.github.io/2025/03/25/kaoyan/shuxue/%E4%BC%BD%E9%A9%AC%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86%E5%80%BC/","excerpt":"伽马函数的积分值","text":"转换完成文档 这个积分过程的原理是通过变量替换将高斯积分转换为伽马函数（Gamma函数）的形式，从而利用已知的伽马函数值 $$\\Gamma\\left(\\frac{1}{2}\\right) = \\sqrt{\\pi}$$ 简化计算。以下是详细分析和关键步骤： 1. 原始积分分析 原积分形式为： $$ I = -\\int_{-\\infty}^{+\\infty} e^{-2x^2} , dx $$ 被积函数 (e^{-2x^2}) 是偶函数，且积分区间关于原点对称。因此可以将积分简化为两倍的 正半轴积分： $$ I = -2 \\int_{0}^{+\\infty} e^{-2x^2} , dx $$ 2. 变量替换（换元法） 令 (2x^2 = t)，则： $$ x = \\frac{1}{\\sqrt{2}} t^{1/2}, \\quad dx = \\frac{1}{2\\sqrt{2}} t^{-1/2} , dt $$ 替换变量后，积分变为： $$ I = -2 \\cdot \\frac{1}{2\\sqrt{2}} \\int_{0}^{+\\infty} e^{-t} \\cdot t^{-1/2} , dt = -\\frac{1}{\\sqrt{2}} \\int_{0}^{+\\infty} e^{-t} t^{-1/2} , dt $$ 3. 伽马函数的引入 积分 $$\\int_{0}^{+\\infty} e^{-t} t^{-1/2} , dt$$ 是伽马函数 $$\\Gamma\\left(\\frac{1}{2}\\right)$$ 的定义式： $$ \\Gamma(z) = \\int_{0}^{+\\infty} t^{z-1} e^{-t} , dt $$ 令 (z = \\frac{1}{2})，则： $$ \\Gamma\\left(\\frac{1}{2}\\right) = \\int_{0}^{+\\infty} t^{-1/2} e^{-t} , dt = \\sqrt{\\pi} $$ 4. 最终结果 代入伽马函数的值： $$ I = -\\frac{1}{\\sqrt{2}} \\cdot \\sqrt{\\pi} = -\\sqrt{\\frac{\\pi}{2}} $$ 关键步骤验证 偶函数对称性： 原积分区间对称，且被积函数为偶函数，因此可简化为两倍正半轴积分。 变量替换的合法性： 替换 $(2x^2 = t)$ 后，积分上下限从 $(x=0 \\to +\\infty)$ 变为 $(t=0 \\to +\\infty)$，且雅可比行列式 $(\\frac{dx}{dt})$ 计算正确。 伽马函数性质： $$\\Gamma\\left(\\frac{1}{2}\\right) = \\sqrt{\\pi}$$ 是已知结果，直接引用。 可能疑问与解答 为什么结果有负号？ 原始积分前有负号（即 $$I = -\\int_{-\\infty}^{+\\infty} \\dots$$），因此最终结果为负。若无负号，结果应为 $$\\sqrt{\\frac{\\pi}{2}}$$。 为何使用伽马函数？ 高斯积分 $$\\int_{0}^{+\\infty} e^{-ax^2} , dx$$ 的标准结果为 $$\\frac{1}{2} \\sqrt{\\frac{\\pi}{a}}$$，此处通过变量替换将其转换为伽马函数形式，结果一致。 结论 此过程通过变量替换和伽马函数的性质，将复杂的高斯积分转换为已知结果，最终得： $$ I = -\\sqrt{\\frac{\\pi}{2}} $$ 若原积分无负号，结果应为 $$\\sqrt{\\frac{\\pi}{2}}$$。 ✅ 验证报告： 已转化行内公式：6处 已调整独立公式：8处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"蓝桥杯抢分算法刷题","slug":"lanqiao/蓝桥杯抢分算法刷题","date":"2025-03-24T07:55:15.000Z","updated":"2025-03-25T13:24:06.023Z","comments":true,"path":"2025/03/24/lanqiao/蓝桥杯抢分算法刷题/","permalink":"https://wwxnb261.github.io/2025/03/24/lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%8A%A2%E5%88%86%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/","excerpt":"蓝桥杯抢分算法刷题","text":"蓝桥杯 7 天速成计划表（直接抄作业） Day1-3：暴力美学训练营 必杀技 1：三层 for 循环爆破 123456# 经典题解模式（以三数之和为例）for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if arr[i]+arr[j]+arr[k] == target: return [i,j,k] 必杀技 2：打表法空间换时打法 1234# 预生成斐波那契数列（打表法）fib = [0,1]for i in range(2,1000): fib.append(fib[i-1] + fib[i-2]) 每日任务： ✅ 暴力破解近 5 年真题 - 日期计算 ✅ 排列组合高频题 - 骰子概率问题 ✅ 简单数论题 - 质因数分解 Day4-7：DFS/BFS 急救包 万能模板（迷宫问题） 123456def dfs(当前状态): if 终止条件: return visited[x][y] = True for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]: dfs(x+dx, y+dy) 重点题型： ▨ 全排列问题（注意剪枝） ▨ 迷宫问题 ▨ 岛屿数量（行列扫描） ▨ 路径计数（记忆化搜索） 保命技巧：遇到递归超时的时候立即转记忆化搜索 三、最后 13 天抢分攻略 📅 每日作息表 时间 任务 工具 7:00-8:30 背模板 + 重写错题 错题本 + A4 纸手写 9:00-12:00 专题突破（优先 DP 基础） 蓝桥杯官方训练系统 14:00-17:00 全真模考（严格计时） 2019-2021 年真题 20:00-22:30 精研答案 + 优化代码 GitHub 大佬题解对比 🚑 五大必考题型急救指南 ① 动态规划（带注释模板） $$ dp[i] = \\max(dp[i-1], dp[i-2]+nums[i]) $$ 只背0-1背包和爬楼梯模板 1234567# 0-1背包标准代码def knapsack(W, wt, val): dp = [0]*(W+1) for i in range(len(wt)): for j in range(W, wt[i]-1, -1): dp[j] = max(dp[j], dp[j-wt[i]] + val[i]) return dp[W] ② 贪心算法（20%命中率） 记住三个经典场景：区间调度、哈夫曼编码、加油站问题 ③ 字符串处理（必考） Python组直接暴力切片，C++组背书substr+正则表达式基础 ④简单数论（30%命中率） 重点掌握：最大公约数、最小公倍数、闰年判断、质数筛选法 ⑤ 日期计算（每年必出：背熟蔡勒公式） 1234567# 星期计算公式def zeller(y, m, d): if m &lt; 3: m += 12 y -= 1 h = (d + 13*(m+1)//5 + y + y//4 - y//100 + y//400) % 7 return [&quot;六&quot;,&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;][h] 四、考场偷分黑科技 玄学输出 遇到不会的题直接输出样例： 1print(&quot;3\\n1 4 5&quot;) # 样例答案格式 输入加速（C++ 版） 12ios::sync_with_stdio(false); cin.tie(0); // 加速 300% 卡时间神操作 123[!WARNING]▨ 最后 5 分钟必须检查换行符▨ 用文本对比工具验证输出格式 博弈论精髓：蓝桥杯是策略游戏而非能力测试，当你开始执行本计划时，已战胜 50% 的裸考者。立即启动暴力美学程序冲击省奖！","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://wwxnb261.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"考研记录3月1日","slug":"kaoyan/guihua/考研记录3月1日","date":"2025-03-21T07:45:41.000Z","updated":"2025-05-30T10:37:59.091Z","comments":true,"path":"2025/03/21/kaoyan/guihua/考研记录3月1日/","permalink":"https://wwxnb261.github.io/2025/03/21/kaoyan/guihua/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%953%E6%9C%881%E6%97%A5/","excerpt":"考研规划记录","text":"由于今日起晚了，所以重新规划1和2号的学习安排 3月1日（剩余时间：16:30-24:00） 总目标：完成数学极限核心概念+数据结构线性表基础 总时长：7.5小时（含休息） 16:30-19:00：数学极限基础（2.5h） 任务： 速看张宇/武忠祥极限基础课（1h，1.5倍速，重点听“泰勒展开”和“洛必达法则”） 刷《复习全书》极限例题（3道经典题，如“sinx/x→1的证明”、“∞-∞型极限计算”） 整理极限公式表（手写：等价无穷小替换、泰勒公式到x³项） 重点： 确保理解极限计算逻辑，暂不追求刷题量，先掌握核心方法。 19:30-21:30：数据结构线性表（2h） 任务： 学习顺序表与链表的区别（王道教材2.1-2.2节，30分钟） 手写单链表反转代码（LeetCode 206，反复写3遍直到无bug，1h） 做王道选择题（仅做“链表插入删除”相关题，5道，30分钟） 重点： 必须能默写链表反转代码，理解指针操作逻辑。 21:30-24:00：数学极限巩固+错题（2.5h） 任务： 刷《660题》极限部分（精选10题，题号1-10，1h） 分析错题（记录错题原因，如“泰勒展开项数不足”，30分钟） 默写公式+明早复习清单（30分钟） 3月2日（全天） 总目标：完成数学导数基础+数据结构栈与队列 总时长：12小时（含休息） 8:30-11:30：数学导数与微分（3h） 任务： 武忠祥导数应用视频（1.5h，重点看“导数定义”和“极值判定”） 手写导数公式表（包括参数方程求导、隐函数求导，30分钟） 刷《660题》导数部分（题号31-40，5题，1h） 14:00-17:00：数据结构栈与队列（3h） 任务： 栈的应用（括号匹配原理，手写代码：LeetCode 20，1h） 循环队列实现（重点：判空条件front == rear，判满条件(rear+1)%size == front，1h） 用栈实现队列（LeetCode 232，1h） 19:00-21:00：数学导数强化（2h） 任务： 总结“证明题”构造辅助函数的方法（如用罗尔定理证明根的存在性，1h） 重做错题+整理导数应用框架（如极值、凹凸性、渐近线，1h） 21:30-23:30：数据结构真题+复盘（2h） 任务： 做408真题（2016年数据结构选择题）（10题，30分钟） 手写循环队列代码（确保能处理边界条件，1h） 复盘今日内容（记录栈与队列易错点，如指针越界，30分钟） 调整后重点变化 删减内容： 原计划Day2的积分学习推迟到Day3，优先保住导数基础。 数据结构减少理论阅读时间，以代码实操为主。 保核心： 数学：极限计算、导数定义与应用 数据结构：链表反转、栈的应用 灵活补救： 若3月2日晚未完成导数全部任务，3月3日早晨优先补“极值判定”部分。 执行提醒 极限/导数公式表：3月2日早晨花20分钟默写，加强短期记忆。 代码手写：必须落实！哪怕写不出也先抄答案再默写，注重过程。 睡眠保证：3月1日晚尽量24:00前睡，3月2日早晨8:00起，避免连续熬夜。","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"数学计划","slug":"数学计划","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"}]},{"title":"极坐标下的二重积分的范围确定","slug":"kaoyan/shuxue/极坐标下的二重积分的范围确定","date":"2025-03-10T08:50:48.000Z","updated":"2025-03-25T13:27:04.926Z","comments":true,"path":"2025/03/10/kaoyan/shuxue/极坐标下的二重积分的范围确定/","permalink":"https://wwxnb261.github.io/2025/03/10/kaoyan/shuxue/%E6%9E%81%E5%9D%90%E6%A0%87%E4%B8%8B%E7%9A%84%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%8C%83%E5%9B%B4%E7%A1%AE%E5%AE%9A/","excerpt":"","text":"1. 极坐标的基本概念 极坐标系中用 $r$ 或 ( $ρ$ )表示点到原点的距离， ( $\\theta$ ) 表示与极轴$（通常是x轴正方向）$的夹角。 面积元素：直角坐标的 $dx,dy$ 转换为极坐标时需乘以雅可比行列式，变为 $r,dr,dθ$。 符号习惯：$r$ 和 $ρ$ 在教材中可能交替使用，本质是同一变量，代表径向距离。 2. 积分范围的确定原则 (1) 简单区域（如圆形） 例：积分区域为半径 $a$ 的圆 $x^2 + y^2 \\leq a^2$。 ( r ) 的范围：$0 \\leq r \\leq a$。 $\\theta$ 的范围：$0 \\leq \\theta \\leq 2\\pi$。 积分表达式为： $$ \\int_{0}^{2\\pi} \\int_{0}^{a} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ (2) 复杂区域（如扇形或环形） 例：积分区域为环形 $1 \\leq r \\leq 2$ 且 $\\pi/4 \\leq \\theta \\leq \\pi/2$。 ( r ) 的范围：由内半径和外半径确定，即 $1 \\leq r \\leq 2$。 $\\theta$ 的范围：由角度区间确定，即 $\\pi/4 \\leq \\theta \\leq \\pi/2$。 积分表达式为： $$ \\int_{\\pi/4}^{\\pi/2} \\int_{1}^{2} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ (3) 依赖角度的径向范围 例：积分区域为心脏线 $r = 1 + \\cos\\theta$。 ( r ) 的范围：对每个固定的 $\\theta$，$r$ 从 $0$ 到 $1 + \\cos\\theta$。 $\\theta$ 的范围：覆盖整个心脏线，即 $0 \\leq \\theta \\leq 2\\pi$。 积分表达式为： $$ \\int_{0}^{2\\pi} \\int_{0}^{1+\\cos\\theta} f(r\\cos\\theta, r\\sin\\theta) \\cdot r , dr , d\\theta $$ 3. 关键注意事项 (1) 雅可比行列式不可忽略 极坐标面积元素必须包含 ( r ) ，否则积分结果错误。例如： $$ \\iint_D f(x,y) , dx,dy \\quad \\Rightarrow \\quad \\iint_{D’} f(r\\cos\\theta, r\\sin\\theta) \\cdot \\textcolor{red}{r} , dr,d\\theta $$ (2) 变量范围的几何依赖性 ( r ) 的范围由积分区域的边界方程（如 $r = g(\\theta)$）确定。 ( $\\theta$ ) 的范围由区域的覆盖角度决定，可能需要分段处理。 (3) 符号统一性 若教材使用 $ρ$ 代替 $r$，只需保持符号一致，例如： $$ \\int_{\\theta_1}^{\\theta_2} \\int_{\\rho_1(\\theta)}^{\\rho_2(\\theta)} f(\\rho,\\theta) \\cdot \\rho , d\\rho , d\\theta $$ 4. 常见误区 误区1：认为 $r$ 可以随意设为常数范围（如 $0 \\leq r \\leq 1$），而忽略实际区域形状。 纠正：必须根据区域几何确定 $r$ 的上下限（可能依赖 $θ$）。 误区2：忽略 $r$ 导致面积元素错误（如写成 $dr,dθ$ 而非 $r,dr,dθ$）。 纠正：始终记得雅可比行列式带来的 $r$ 因子。 5. 总结 ( r ) 或 ( $\\rho$ ) 的范围不是随意设定，而是由积分区域的几何形状（如圆形、扇形、曲线边界等）决定。 正确步骤： 画出积分区域图，分析边界方程； 确定 $r$ 的最小和最大值（可能随 $\\theta$ 变化）； 确定 $\\theta$ 的覆盖范围； 写出完整的积分表达式，包含 $r,dr,dθ$。 通过结合几何直观和边界方程，可以准确设定极坐标下的积分范围。 ✅ 验证报告： 已转化行内公式：24处 已调整独立公式：4处 内容变更检测：0处非公式修改","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"函数的连续，可导，可微辨析","slug":"kaoyan/shuxue/函数的连续，可导，可微辨析","date":"2025-03-09T07:46:50.000Z","updated":"2025-03-25T13:26:55.616Z","comments":true,"path":"2025/03/09/kaoyan/shuxue/函数的连续，可导，可微辨析/","permalink":"https://wwxnb261.github.io/2025/03/09/kaoyan/shuxue/%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%EF%BC%8C%E5%8F%AF%E5%AF%BC%EF%BC%8C%E5%8F%AF%E5%BE%AE%E8%BE%A8%E6%9E%90/","excerpt":"函数的连续，可导，可微辨析","text":"当一个函数的题目给出条件为：函数在区间内有定义的话，并不意味着该函数是连续的。 当提到函数在区间内有定义，这只表示该区间内的每个点都有对应的函数值，但这并不保证函数是连续的。以下是几个关键点： 函数有定义与连续性的区别 函数有定义: 对于区间内的每一点 x，函数 f(x) 都有一个确定的值 函数连续: 除了在每点有定义外，还要求 lim(x→a) f(x) = f(a) 反例说明 考虑函数： $$ f(x) = \\begin{cases} 1, & x \\geq 0 \\\\ -1, & x < 0 \\end{cases} $$ 该函数在整个实数轴上有定义，但在 x = 0 处不连续，因为左右极限不相等。 考研中的应用 在解题时，当仅给出函数在区间内有定义的条件时，需要额外检验函数的连续性，特别是在： 讨论函数的可导性时（连续是可导的必要条件） 应用中值定理、罗尔定理等需要连续性的定理时 计算定积分时（被积函数需要连续） 连续、可导、可微的关系 理解这三者之间的关系是数学分析中的重要内容： 可导 → 连续: 如果函数在某点可导，则函数在该点必定连续 连续 ↛ 可导: 函数连续不一定可导，如 f(x) = |x| 在 x = 0 处连续但不可导 一元函数中: 可导与可微等价 多元函数中: 偏导数存在不保证函数可微 函数有定义只是讨论函数性质的起点，进一步分析连续性、可导性和可微性对于理解函数行为至关重要。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"函数连续中的间断点类型总结","slug":"kaoyan/shuxue/函数连续中的间断点类型总结","date":"2025-03-04T07:46:21.000Z","updated":"2025-03-25T13:26:08.911Z","comments":true,"path":"2025/03/04/kaoyan/shuxue/函数连续中的间断点类型总结/","permalink":"https://wwxnb261.github.io/2025/03/04/kaoyan/shuxue/%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E4%B8%AD%E7%9A%84%E9%97%B4%E6%96%AD%E7%82%B9%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/","excerpt":"函数连续中的间断点类型总结","text":"间断点的类型主要根据函数在该点的极限行为进行分类，以下是详细的分类及说明： 1. 第一类间断点（左右极限均存在） (a) 可去间断点（Removable Discontinuity） 特点： 函数在该点的左极限和右极限存在且相等，但函数值不等于该极限，或函数在该点无定义。 通过重新定义或修正函数值可使函数在该点连续。 示例： $f(x) = \\frac{\\sin x}{x} \\quad (x \\neq 0)$ 在 $\\ ( x=0 )$ 处无定义，但 $\\ (\\lim_{x \\to 0} f(x) = 1)$，补充定义 $\\ ( f(0) = 1 )$ 后连续。 (b) 跳跃间断点（Jump Discontinuity） 特点： 左极限和右极限均存在，但两者不相等。 函数图像在该点出现“跳跃”。 示例： $\\ [ f(x) = \\begin{cases} x + 1 &amp; x \\geq 0, \\ x - 1 &amp; x &lt; 0 \\end{cases} ]$ 在 $\\ ( x=0 )$ 处，左极限为 $\\ (-1)$，右极限为 $\\ (1)$，形成跳跃。 2. 第二类间断点（至少一侧极限不存在） 以下是第二类间断点的两个主要类型： (a) 无穷间断点（Infinite Discontinuity） 特点： 当 x 趋近于该点时，函数值趋向正无穷或负无穷。 通常伴随垂直渐近线。 示例：当 x → 0 时，函数 $f(x) = \\frac&#123;1&#125;&#123;x&#125;$ 的值趋向 ±∞。 (b) 振荡间断点（Oscillatory Discontinuity） 特点： 函数在该点附近无限振荡，导致极限不存在。 常见于涉及三角函数或周期函数的复杂表达式中。 示例：考虑函数 $f(x) = sin(\\frac&#123;1&#125;&#123;x&#125;)$ 当 x → 0 时，函数值在 [-1,1] 之间无限振荡，因此极限不存在。 3. 其他特殊类型（补充说明） 混合型间断点 特点： 结合多种不连续行为，例如一侧趋向无穷，另一侧振荡。 示例： $\\ f(x) = \\begin{cases} \\frac{1}{x} &amp; x &gt; 0, \\ \\sin\\left(\\frac{1}{x}\\right) &amp; x &lt; 0 \\end{cases}$ 在 $\\ ( x=0 )$ 处，右侧趋向 $\\ ( +\\infty )，$左侧振荡。 本质不连续点（Essential Discontinuity） 别名：部分文献将第二类间断点统称为本质不连续点。 总结表格 类型 特点 示例 可去间断点 极限存在但函数值不符未定义 $\\ \\frac{\\sin x}{x}$ 跳跃间断点 左右极限存在但不相等 分段函数跳跃点 无穷间断点 函数趋向无穷大或无穷小 $\\ \\frac{1}{x}$ 振荡间断点 函数无限振荡，极限不存在 $\\ \\sin\\left(\\frac{1}{x}\\right)$ 关键区别 第一类 vs 第二类： 第一类间断点的左右极限均存在（可比较大小），第二类至少一侧不存在或趋向无穷。 可修复性： 仅可去间断点可通过修正函数值恢复连续性。 通过以上分类，可系统分析函数在不同点的不连续行为。","categories":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"3月份半个月学习计划","slug":"kaoyan/guihua/3月份半个月学习计划","date":"2025-03-01T07:31:35.000Z","updated":"2025-05-30T10:37:14.933Z","comments":true,"path":"2025/03/01/kaoyan/guihua/3月份半个月学习计划/","permalink":"https://wwxnb261.github.io/2025/03/01/kaoyan/guihua/3%E6%9C%88%E4%BB%BD%E5%8D%8A%E4%B8%AA%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","excerpt":"3月份半个月学习计划","text":"以下是重新优化后的15天考研数学一（高数核心）与数据结构系统学习计划，移除概率论，全面覆盖高数重点章节（包括多元微积分、曲线曲面积分、无穷级数等），并保持数据结构每日3-4小时系统学习。计划按**&quot;基础-强化-综合&quot;三阶段**推进，确保扎实掌握。 调整后核心策略 优先级：数学一高数（70%）+ 数据结构（30%），每天学习10-12小时 高数重点：极限→一元微积分→多元微积分→重积分→曲线曲面积分→级数→微分方程 数据结构：线性表→树→图→排序/查找→真题，每日代码实操 学习逻辑：视频+教材+题型分类+错题本，拒绝遗漏核心考点 每日作息强化版 时间段 内容 7:00-8:00 起床+背诵公式（如格林公式、DFS代码模板） 8:30-12:00 数学攻坚（视频+例题） 14:00-17:00 数据结构系统学习（教材+代码） 19:00-21:00 数学/数据结构交叉刷题 21:30-22:30 错题整理+Anki记忆卡 第一阶段：基础框架搭建（Day 1-5） Day 1-2：高数极限与连续 + 数据结构线性表 数学任务（每天7小时）： 上午4h： 张宇/武忠祥极限视频（1.5倍速，重点：泰勒展开、夹逼定理） 《复习全书》例题（极限存在性证明、∞/∞型计算） 下午2h： 刷《660题》极限部分（题1-30）+ 错题整理 晚上1h： 默写等价无穷小替换表、泰勒公式到x³项 数据结构（每天3小时）： 下午穿插2h： 顺序表与链表操作（插入/删除时间复杂度） 手写代码：单链表反转（LeetCode 206）、合并有序链表（LeetCode 21） 晚上1h： 王道选择题（链表特性与应用场景） Day 3-4：高数一元微分学 + 数据结构栈与队列 数学任务（每天7小时）： 上午4h： 武忠祥导数应用视频（极值、凹凸性、渐近线） 《复习全书》例题（中值定理证明题） 下午2h： 刷《660题》导数部分（题31-60）+ 总结辅助函数构造法 晚上1h： 整理导数公式表（参数方程、隐函数求导） 数据结构（每天3小时）： 下午穿插2h： 栈实现队列（LeetCode 232）、循环队列判满/判空 手写代码：括号匹配（LeetCode 20） 晚上1h： 王道选择题（栈与队列的典型应用） Day 5：高数一元积分学 + 数据结构树基础 数学任务（7小时）： 上午4h： 张宇积分技巧视频（分部积分、三角代换） 《复习全书》例题（定积分几何应用、反常积分） 下午2h： 刷《660题》积分部分（题81-110） 晚上1h： 整理积分公式表（如∫√(a²-x²)dx） 数据结构（3小时）： 下午穿插2h： 二叉树遍历（先序/中序递归与非递归） 手写代码：中序非递归遍历（栈实现） 晚上1h： 王道选择题（二叉树节点数计算） 第二阶段：高数核心强化（Day 6-10） Day 6-7：高数多元微分学 + 数据结构树应用 数学任务（每天7小时）： 上午4h： 武忠祥多元微分视频（偏导数、全微分、方向导数） 《复习全书》例题（隐函数求导、条件极值） 下午2h： 刷《660题》多元微分部分（题200-230） 晚上1h： 总结梯度、方向导数与极值的关系 数据结构（每天3小时）： 下午穿插2h： 平衡二叉树（AVL树旋转）、二叉搜索树验证（LeetCode 98） 晚上1h： 王道选择题（AVL树插入调整步骤） Day 8-9：高数重积分 + 数据结构图基础 数学任务（每天7小时）： 上午4h： 张宇重积分视频（二重/三重积分计算、极坐标/柱坐标变换） 《复习全书》例题（交换积分次序、奇偶性简化） 下午2h： 刷《660题》重积分部分（题240-270） 晚上1h： 整理对称性简化技巧（如轮换对称性） 数据结构（每天3小时）： 下午穿插2h： 图的存储（邻接矩阵/邻接表）、DFS/BFS代码实现 手写代码：课程表拓扑排序（LeetCode 207） 晚上1h： 王道选择题（DFS与BFS应用场景） Day 10：高数曲线曲面积分 + 数据结构排序算法 数学任务（7小时）： 上午4h： 武忠祥曲线积分视频（第一/二型曲线积分、格林公式） 《复习全书》例题（参数化计算、斯托克斯公式） 下午2h： 刷《660题》曲线曲面积分部分（题280-310） 晚上1h： 总结高斯公式与散度、旋度的联系 数据结构（3小时）： 下午穿插2h： 快速排序/堆排序非递归实现、稳定性分析 手写代码：快速排序分区函数（Hoare法） 晚上1h： 王道选择题（排序算法时间复杂度对比） 第三阶段：综合冲刺（Day 11-15） Day 11-12：高数无穷级数 + 数据结构查找算法 数学任务（每天7小时）： 上午4h： 张宇级数视频（正项级数、幂级数求和、傅里叶级数） 《复习全书》例题（收敛性判别、展开式求系数） 下午2h： 刷《660题》级数部分（题320-350） 晚上1h： 整理常见展开式（如1/(1-x)=∑xⁿ, |x|&lt;1） 数据结构（每天3小时）： 下午穿插2h： 哈希表冲突处理（拉链法、开放定址法） 手写代码：LRU缓存（LeetCode 146） 晚上1h： 王道选择题（B树与B+树差异） Day 13-14：高数真题模拟 + 数据结构真题 数学任务（每天7小时）： 限时3h完成2020年真题 4h逐题分析错因（重点：曲线积分与级数大题） 数据结构（每天3小时）： 下午穿插2h： 408真题（2015-2020数据结构大题） 重点：二叉树非递归遍历、图最短路径 晚上1h： 复盘代码边界条件（如指针判空、循环终止） Day 15：总复习与补漏 数学（7小时）： 上午4h：默写核心公式（从极限到曲面积分） 下午3h：重做高数错题（如格林公式应用） 数据结构（3小时）： 系统复盘线性表→图→排序 手写代码：二叉树层序遍历（LeetCode 102） 每日作息强化版 时间段 内容 7:00-8:00 起床+背诵公式（如格林公式、DFS代码模板） 8:30-12:00 数学攻坚（视频+例题） 14:00-17:00 数据结构系统学习（教材+代码） 19:00-21:00 数学/数据结构交叉刷题 21:30-22:30 错题整理+Anki记忆卡 关键执行原则 高数优先级：若时间紧张，优先完成曲线曲面积分和级数，这两部分是数一特有且难度较高的考点 数据结构代码：每日至少手写1题，重点训练非递归遍历和算法应用（如拓扑排序） 错题本：按章节分类记录错题，每晚睡前回顾10分钟 健康管理：每学习1小时休息5分钟，每天保证6小时睡眠 按此计划，15天内可系统攻克高数全部核心内容，并保持数据结构代码手感！ 如需进一步细化某部分（如曲线积分参数化方法），请随时告知！","categories":[{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"}],"tags":[{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"数学计划","slug":"数学计划","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6%E8%AE%A1%E5%88%92/"}]},{"title":"每天一题蓝桥杯：报数游戏","slug":"lanqiao/每天一题蓝桥杯：报数游戏","date":"2024-10-16T14:01:16.000Z","updated":"2024-10-17T07:59:19.411Z","comments":true,"path":"2024/10/16/lanqiao/每天一题蓝桥杯：报数游戏/","permalink":"https://wwxnb261.github.io/2024/10/16/lanqiao/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%9A%E6%8A%A5%E6%95%B0%E6%B8%B8%E6%88%8F/","excerpt":"","text":"今日蓝桥杯题目 小蓝和朋友们在玩一个报数游戏。由于今年是2024 年，他们决定要从小到大轮流报出是20 或 24倍数的正整数。前10 个被报出的数是：20,24,40,48,60,72,80,96,100,120。请问第202420242024 个被报出的数是多少? 问题背景 目标：找出第 ( n ) 个是 20 或 24 的倍数的正整数，按从小到大的顺序排列，且不重复。 示例： 前10个被报出的数是：20, 24, 40, 48, 60, 72, 80, 96, 100, 120。 为什么使用二分查找？ 在处理这样的问题时，直接枚举所有满足条件的数直到找到第 ( n ) 个数是不现实的，尤其当 ( n ) 很大（如 ( n = 202420242024 )）时。因此，我们需要一种更高效的方法来定位目标数的位置。二分查找 是一种适合此类问题的高效算法。 二分查找的基本原理 二分查找 是一种在有序数组中查找特定元素的算法，其基本思想是通过不断将搜索范围缩小一半来快速定位目标元素。虽然在这个问题中，我们不是在一个固定的数组中查找元素，而是在一个按特定规则生成的数列中查找第 ( n ) 个元素，但二分查找的思想仍然适用。 应用于本问题的二分查找步骤 定义搜索范围： 左界（Left）：最小可能的数，通常设为 1。 右界（Right）：最大可能的数，可以初步设为 $( n \\times \\text{max}(a, b) )$。在本例中，( a = 20 )，( b = 24 )，所以右界可以设为 ( n \\times 24 )。 计算中点： 计算当前搜索范围的中点 $( \\text{mid} = \\left\\lfloor \\frac{\\text{left} + \\text{right}}{2} \\right\\rfloor )$。 计算中点位置的满足条件的数的数量： 使用容斥原理计算不超过 $( \\text{mid} )$ 的 20 或 24 的倍数的数量 $( C(\\text{mid}) )$： $$ C(\\text{mid}) = \\left\\lfloor \\frac{\\text{mid}}{20} \\right\\rfloor + \\left\\lfloor \\frac{\\text{mid}}{24} \\right\\rfloor - \\left\\lfloor \\frac{\\text{mid}}{120} \\right\\rfloor $$ 其中，120 是 20 和 24 的最小公倍数（LCM）。 调整搜索范围： 如果 $( C(\\text{mid}) &lt; n )$： 说明第 ( n ) 个数位于 ( \\text{mid} ) 右侧，因此将左界设为 ( \\text{mid} + 1 )。 否则（$( C(\\text{mid}) \\geq n )$： 说明第 $( n ) 个数位于 ( \\text{mid} )$ 左侧或就是 $( \\text{mid} )$，因此将右界设为 $( \\text{mid} )$。 重复步骤 2-4，直到左界等于右界。 最终结果： 当左界与右界相等时，该值即为第 ( n ) 个满足条件的数。 为什么 $( C(x) &lt; n ) 表示 ( x )$ 太小？ 定义计数函数 $( C(x) )$ 对于任意正整数 ( x )，( C(x) ) 表示不超过 ( x ) 的数中，既是 20 或 24 的倍数的数的数量： $$ C(x) = \\left\\lfloor \\frac{x}{20} \\right\\rfloor + \\left\\lfloor \\frac{x}{24} \\right\\rfloor - \\left\\lfloor \\frac{x}{120} \\right\\rfloor $$ 二分查找的目标 我们希望找到最小的 ( x )，使得 ( C(x) = n )。换句话说，找到第 ( n ) 个满足条件的数，即第 ( n ) 个 20 或 24 的倍数。 搜索过程中的判断 如果 $( C(\\text{mid}) &lt; n )$： 说明在 ( 1 ) 到 $( \\text{mid} )$ 之间，只有 $( C(\\text{mid}) )$ 个数满足条件，但我们需要第 ( n ) 个数。 因此，第 ( n ) 个数 必定大于 $( \\text{mid} )$。 结论：当前的 $( \\text{mid} )$ 太小，无法包含第 ( n ) 个数，需要在更大的范围内继续搜索。 如果 $( C(\\text{mid}) \\geq n )$： 说明第 ( n ) 个数 可能在 $( \\text{mid} )$ 之前，也可能就是 $( \\text{mid} )$ 本身。 结论：需要在较小的范围内继续搜索，缩小右界。 直观理解 想象一下你正在寻找一个特定位置的数，例如第1000个满足条件的数。通过二分查找，你每次选择一个中间值并计算在这个中间值之前有多少个满足条件的数： 如果计算出的数量 $( C(\\text{mid}) )$ 比目标 ( n ) 小，说明第 ( n ) 个数还没到，需要往更大的方向看。 如果计算出的数量 $( C(\\text{mid}) )$ 大于或等于目标 ( n )，说明目标数已经在 $( \\text{mid} )$ 或更小的范围内，可以缩小搜索范围，继续在较小的范围内寻找精确的位置。 示例演示 目标：找到第10个是 20 或 24 的倍数的数。 初始化搜索范围： 左界 $( \\text{left} = 1 )$ 右界 $( \\text{right} = 10 \\times 24 = 240 )（初步设定为 ( n \\times \\text{max}(a, b) )）$ 第一次迭代： 中点 $( \\text{mid} = \\left\\lfloor \\frac{1 + 240}{2} \\right\\rfloor = 120 )$ 计算 ( C(120) )： $$ C(120) = \\left\\lfloor \\frac{120}{20} \\right\\rfloor + \\left\\lfloor \\frac{120}{24} \\right\\rfloor - \\left\\lfloor \\frac{120}{120} \\right\\rfloor = 6 + 5 - 1 = 10 $$ 比较 ( C(120) = 10 ) 与 ( n = 10 )： 因为 $( C(120) \\geq n )$，将右界设为 ( 120 )。 第二次迭代： 新的搜索范围：$( \\text{left} = 1 )$，$( \\text{right} = 120 )$ 中点 $( \\text{mid} = \\left\\lfloor \\frac{1 + 120}{2} \\right\\rfloor = 60 )$ 计算 ( C(60) )： $$ C(60) = \\left\\lfloor \\frac{60}{20} \\right\\rfloor + \\left\\lfloor \\frac{60}{24} \\right\\rfloor - \\left\\lfloor \\frac{60}{120} \\right\\rfloor = 3 + 2 - 0 = 5 $$ 比较 ( C(60) = 5 ) 与 ( n = 10 )： 因为 ( C(60) &lt; n )，将左界设为 ( 61 )。 第三次迭代： 新的搜索范围：$( \\text{left} = 61 )$，$( \\text{right} = 120 )$ 中点 $( \\text{mid} = \\left\\lfloor \\frac{61 + 120}{2} \\right\\rfloor = 90 )$ 计算 ( C(90) )： $$ C(90) = \\left\\lfloor \\frac{90}{20} \\right\\rfloor + \\left\\lfloor \\frac{90}{24} \\right\\rfloor - \\left\\lfloor \\frac{90}{120} \\right\\rfloor = 4 + 3 - 0 = 7 $$ 比较 ( C(90) = 7 ) 与 ( n = 10 )： 因为 ( C(90) &lt; n )，将左界设为 ( 91 )。 继续迭代，直到左界等于右界： 最终会发现，当 $( \\text{left} = 120 )$ 时，( C(120) = 10 )，满足条件。 结果：( x = 120 ) 验证结果： 前10个数确实是：20, 24, 40, 48, 60, 72, 80, 96, 100, 120。 因此，算法正确地找到了第10个数是 120。 为什么二分查找有效？ 有序性：满足条件的数按升序排列，二分查找依赖于这一特性，通过比较中点位置的数的数量与目标 ( n ) 之间的关系，逐步缩小搜索范围。 效率：二分查找的时间复杂度为 $( O(\\log N) )$，远比线性搜索（时间复杂度 ( O(N) )）高效，特别是在 ( N ) 很大的情况下。 二分查找在此问题中的关键点 定义搜索范围： 初始左界设为 1，右界设为 $( n \\times \\text{max}(a, b) )$。 在本例中，( a = 20 )，( b = 24 )，所以右界可以设为 $( n \\times 24 )$。 中点计算与比较： 通过计算中点 $( \\text{mid} )$ 的位置，利用容斥原理计算不超过 $( \\text{mid} )$ 的满足条件的数的数量 $( C(\\text{mid}) )$。 如果 $( C(\\text{mid}) &lt; n )$，则更新左界为 $( \\text{mid} + 1 )$。 否则，将右界设为 $( \\text{mid} )$。 终止条件： 当左界等于右界时，搜索结束，左界（或右界）即为第 ( n ) 个满足条件的数。 解决代码示例 以下是一个完整的 Python 实现，结合了二分查找和容斥原理，用于精确找到第 ( n ) 个是 a 或 b 的倍数的数。 1234567891011121314151617181920212223242526272829303132333435def lcm(a, b): &quot;&quot;&quot;计算两个数的最小公倍数&quot;&quot;&quot; from math import gcd return a * b // gcd(a, b)def count_multiples(x, a, b): &quot;&quot;&quot;计算不超过 x 的 a 或 b 的倍数的数量&quot;&quot;&quot; return x // a + x // b - x // lcm(a, b)def find_nth_number(n, a, b): &quot;&quot;&quot;使用二分查找找到第 n 个是 a 或 b 的倍数的数&quot;&quot;&quot; left = 1 right = n * max(a, b) # 初始右界设为 n * max(a, b) while left &lt; right: mid = (left + right) // 2 current_count = count_multiples(mid, a, b) if current_count &lt; n: left = mid + 1 else: right = mid return left# 示例 1: 寻找第 202420242024 个是 20 或 24 的倍数的数n = 202420242024a = 20b = 24result = find_nth_number(n, a, b)print(f&quot;第 &#123;n&#125; 个被报出的数是: &#123;result&#125;&quot;) # 输出: 2429042904288# 示例 2: 寻找第 1000 个是 10 或 15 的倍数的数n = 1000a = 10b = 15result = find_nth_number(n, a, b)print(f&quot;第 &#123;n&#125; 个被报出的数是: &#123;result&#125;&quot;) # 输出: 7500","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"},{"name":"二分","slug":"二分","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%88%86/"}]},{"title":"每天一题蓝桥杯：单词博弈","slug":"lanqiao/每天一题蓝桥杯：单词游戏博弈","date":"2024-10-15T13:12:03.000Z","updated":"2024-10-16T15:04:25.655Z","comments":true,"path":"2024/10/15/lanqiao/每天一题蓝桥杯：单词游戏博弈/","permalink":"https://wwxnb261.github.io/2024/10/15/lanqiao/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%A2%98%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%9A%E5%8D%95%E8%AF%8D%E6%B8%B8%E6%88%8F%E5%8D%9A%E5%BC%88/","excerpt":"","text":"今日蓝桥杯题目 夏日夜晚，小蓝和小桥在蓝桥公园散步。在蜿蜒的小路上，他们发现了一堆单词。 小蓝和小桥对这些单词饶有兴致，于是开始收集它们：小蓝收集了n 个单词，小桥收集了m 个单词。收集完单词后，他们决定玩一个游戏。 游戏规则如下：每一回合，玩家需要从自己收集到的单词中说出一个单词。所说的单词必须满足以下条件：该单词的字典序大小要比上一个单词大，并且该单词要么与上一个单词以相同的字母开头，要么以字母表中紧随其后的字母开头。 例如，如果上一个单词是 apple，那么接下来的单词可以是： 以相同字母 a 开头的单词，如：apply。以字母表中紧随 a 之后的字母 b 开头的单词，如 banana。 如果某个玩家无法满足上述条件，则该玩家输掉游戏。 小蓝和小桥轮流进行，由小蓝率先开始。 已知小蓝第一次会说出自己单词堆中按字典序排列最小的单词。请问，如果小蓝和小桥都按照最优策略进行游戏，谁会获胜？ 题解 1234567891011121314151617181920212223242526import osimport sysn , m = map(int,input().split())a =[input() for _ in range(n)]b = [input() for _ in range(m)]a.sort(reverse=True) #这是正序，倒序就是reverse：trueb.sort(reverse= True) flag = Truepre = a.pop()while(flag and a) or (not flag and b): if flag: #flag为true的时候，这时候小蓝已经说过一个了， 所以轮到小桥 word = a.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1 ) ) and word &gt; pre : flag = False pre = word else: word = b.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1) ) and word &gt; pre : flag = True pre = wordprint(&#x27;L&#x27;) if flag else print(&#x27;Q&#x27;) 接下来是hexo的内置代码块： 12345678910111213141516171819202122232425import osimport sysn , m = map(int,input().split())a =[input() for _ in range(n)]b = [input() for _ in range(m)]a.sort(reverse=True) #这是正序，倒序就是reverse：trueb.sort(reverse= True) flag = Truepre = a.pop()while(flag and a) or (not flag and b): if flag: #flag为true的时候，这时候小蓝已经说过一个了， 所以轮到小桥 word = a.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1 ) ) and word &gt; pre : flag = False pre = word else: word = b.pop() if (word[0] == pre[0] or word[0] == chr(ord(pre[0])+1) ) and word &gt; pre : flag = True pre = wordprint(&#x27;L&#x27;) if flag else print(&#x27;Q&#x27;) 学习到了什么？ 字典序 什么是字典序，就是按照字典顺序进行比较排序的结果，比如说两个单词app，apple。从第一个字母开始进行比较，如果一样就继续对比下一个字母，直到不一样。比如到了app以后，apple还有le，而app则没有了，app的字典序就比apple要小。排序就是’app&lt;apple’。 字典序排序 如果有很多个单词进行字典序比较，是不是会比较头疼？但是实际上python和c++中已经内置了字典序排序，可以直接使用sort()或者是reverse()函数直接对多个对象进行字典序排序。sort()是从小到大进行排序，反之从大到小。 列表推导式 代码里用到列表推导式：a = [input() for _ in range(n)]，或者其他的形式a = list(map(int , input().split()))，这样的式子简洁高效，要记住。","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"考研日记","slug":"考研日记","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"},{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"复习规划","slug":"复习规划","permalink":"https://wwxnb261.github.io/categories/%E5%A4%8D%E4%B9%A0%E8%A7%84%E5%88%92/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"每日打卡","slug":"每日打卡","permalink":"https://wwxnb261.github.io/tags/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1/"},{"name":"408复习","slug":"408复习","permalink":"https://wwxnb261.github.io/tags/408%E5%A4%8D%E4%B9%A0/"},{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"https://wwxnb261.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"},{"name":"数学","slug":"数学","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"等价无穷小","slug":"等价无穷小","permalink":"https://wwxnb261.github.io/tags/%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F/"},{"name":"极限","slug":"极限","permalink":"https://wwxnb261.github.io/tags/%E6%9E%81%E9%99%90/"},{"name":"考研计划","slug":"考研计划","permalink":"https://wwxnb261.github.io/tags/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"},{"name":"数学计划","slug":"数学计划","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E5%AD%A6%E8%AE%A1%E5%88%92/"},{"name":"专业课计划","slug":"专业课计划","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE%E8%AE%A1%E5%88%92/"},{"name":"数据结构","slug":"数据结构","permalink":"https://wwxnb261.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"二叉树","slug":"二叉树","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"专业课","slug":"专业课","permalink":"https://wwxnb261.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"算法","slug":"算法","permalink":"https://wwxnb261.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"},{"name":"蓝桥杯学习","slug":"蓝桥杯学习","permalink":"https://wwxnb261.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AD%A6%E4%B9%A0/"},{"name":"二分","slug":"二分","permalink":"https://wwxnb261.github.io/tags/%E4%BA%8C%E5%88%86/"}]}